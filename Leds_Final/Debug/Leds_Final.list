
Leds_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  08004bc0  08004bc0  00005bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052cc  080052cc  0000d480  2**0
                  CONTENTS
  4 .ARM          00000000  080052cc  080052cc  0000d480  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052cc  080052cc  0000d480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052cc  080052cc  000062cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052d0  080052d0  000062d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00006480  20000000  080052d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b22c  20006480  0800b754  0000d480  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200116ac  0800b754  0000d6ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d480  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8bc  00000000  00000000  0000d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e1f  00000000  00000000  00018d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0001ab90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b7  00000000  00000000  0001b6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233a8  00000000  00000000  0001bf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8e0  00000000  00000000  0003f317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db285  00000000  00000000  0004cbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127e7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034ec  00000000  00000000  00127ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012b3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20006480 	.word	0x20006480
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004ba8 	.word	0x08004ba8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20006484 	.word	0x20006484
 8000204:	08004ba8 	.word	0x08004ba8

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__gedf2>:
 80007d4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80007d8:	e006      	b.n	80007e8 <__cmpdf2+0x4>
 80007da:	bf00      	nop

080007dc <__ledf2>:
 80007dc:	f04f 0c01 	mov.w	ip, #1
 80007e0:	e002      	b.n	80007e8 <__cmpdf2+0x4>
 80007e2:	bf00      	nop

080007e4 <__cmpdf2>:
 80007e4:	f04f 0c01 	mov.w	ip, #1
 80007e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007fe:	d01b      	beq.n	8000838 <__cmpdf2+0x54>
 8000800:	b001      	add	sp, #4
 8000802:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000806:	bf0c      	ite	eq
 8000808:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800080c:	ea91 0f03 	teqne	r1, r3
 8000810:	bf02      	ittt	eq
 8000812:	ea90 0f02 	teqeq	r0, r2
 8000816:	2000      	moveq	r0, #0
 8000818:	4770      	bxeq	lr
 800081a:	f110 0f00 	cmn.w	r0, #0
 800081e:	ea91 0f03 	teq	r1, r3
 8000822:	bf58      	it	pl
 8000824:	4299      	cmppl	r1, r3
 8000826:	bf08      	it	eq
 8000828:	4290      	cmpeq	r0, r2
 800082a:	bf2c      	ite	cs
 800082c:	17d8      	asrcs	r0, r3, #31
 800082e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000832:	f040 0001 	orr.w	r0, r0, #1
 8000836:	4770      	bx	lr
 8000838:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800083c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000840:	d102      	bne.n	8000848 <__cmpdf2+0x64>
 8000842:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000846:	d107      	bne.n	8000858 <__cmpdf2+0x74>
 8000848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d1d6      	bne.n	8000800 <__cmpdf2+0x1c>
 8000852:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000856:	d0d3      	beq.n	8000800 <__cmpdf2+0x1c>
 8000858:	f85d 0b04 	ldr.w	r0, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop

08000860 <__aeabi_cdrcmple>:
 8000860:	4684      	mov	ip, r0
 8000862:	4610      	mov	r0, r2
 8000864:	4662      	mov	r2, ip
 8000866:	468c      	mov	ip, r1
 8000868:	4619      	mov	r1, r3
 800086a:	4663      	mov	r3, ip
 800086c:	e000      	b.n	8000870 <__aeabi_cdcmpeq>
 800086e:	bf00      	nop

08000870 <__aeabi_cdcmpeq>:
 8000870:	b501      	push	{r0, lr}
 8000872:	f7ff ffb7 	bl	80007e4 <__cmpdf2>
 8000876:	2800      	cmp	r0, #0
 8000878:	bf48      	it	mi
 800087a:	f110 0f00 	cmnmi.w	r0, #0
 800087e:	bd01      	pop	{r0, pc}

08000880 <__aeabi_dcmpeq>:
 8000880:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000884:	f7ff fff4 	bl	8000870 <__aeabi_cdcmpeq>
 8000888:	bf0c      	ite	eq
 800088a:	2001      	moveq	r0, #1
 800088c:	2000      	movne	r0, #0
 800088e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000892:	bf00      	nop

08000894 <__aeabi_dcmplt>:
 8000894:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000898:	f7ff ffea 	bl	8000870 <__aeabi_cdcmpeq>
 800089c:	bf34      	ite	cc
 800089e:	2001      	movcc	r0, #1
 80008a0:	2000      	movcs	r0, #0
 80008a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a6:	bf00      	nop

080008a8 <__aeabi_dcmple>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff ffe0 	bl	8000870 <__aeabi_cdcmpeq>
 80008b0:	bf94      	ite	ls
 80008b2:	2001      	movls	r0, #1
 80008b4:	2000      	movhi	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmpge>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffce 	bl	8000860 <__aeabi_cdrcmple>
 80008c4:	bf94      	ite	ls
 80008c6:	2001      	movls	r0, #1
 80008c8:	2000      	movhi	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmpgt>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffc4 	bl	8000860 <__aeabi_cdrcmple>
 80008d8:	bf34      	ite	cc
 80008da:	2001      	movcc	r0, #1
 80008dc:	2000      	movcs	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_d2uiz>:
 80008e4:	004a      	lsls	r2, r1, #1
 80008e6:	d211      	bcs.n	800090c <__aeabi_d2uiz+0x28>
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008ec:	d211      	bcs.n	8000912 <__aeabi_d2uiz+0x2e>
 80008ee:	d50d      	bpl.n	800090c <__aeabi_d2uiz+0x28>
 80008f0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d40e      	bmi.n	8000918 <__aeabi_d2uiz+0x34>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	fa23 f002 	lsr.w	r0, r3, r2
 800090a:	4770      	bx	lr
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	4770      	bx	lr
 8000912:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000916:	d102      	bne.n	800091e <__aeabi_d2uiz+0x3a>
 8000918:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800091c:	4770      	bx	lr
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	4770      	bx	lr

08000924 <__aeabi_d2f>:
 8000924:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000928:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800092c:	bf24      	itt	cs
 800092e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000932:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000936:	d90d      	bls.n	8000954 <__aeabi_d2f+0x30>
 8000938:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800093c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000940:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000944:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000948:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800094c:	bf08      	it	eq
 800094e:	f020 0001 	biceq.w	r0, r0, #1
 8000952:	4770      	bx	lr
 8000954:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000958:	d121      	bne.n	800099e <__aeabi_d2f+0x7a>
 800095a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800095e:	bfbc      	itt	lt
 8000960:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000964:	4770      	bxlt	lr
 8000966:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800096e:	f1c2 0218 	rsb	r2, r2, #24
 8000972:	f1c2 0c20 	rsb	ip, r2, #32
 8000976:	fa10 f30c 	lsls.w	r3, r0, ip
 800097a:	fa20 f002 	lsr.w	r0, r0, r2
 800097e:	bf18      	it	ne
 8000980:	f040 0001 	orrne.w	r0, r0, #1
 8000984:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000988:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800098c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000990:	ea40 000c 	orr.w	r0, r0, ip
 8000994:	fa23 f302 	lsr.w	r3, r3, r2
 8000998:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800099c:	e7cc      	b.n	8000938 <__aeabi_d2f+0x14>
 800099e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009a2:	d107      	bne.n	80009b4 <__aeabi_d2f+0x90>
 80009a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a8:	bf1e      	ittt	ne
 80009aa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ae:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009b2:	4770      	bxne	lr
 80009b4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009b8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009bc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db0b      	blt.n	80009ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f003 021f 	and.w	r2, r3, #31
 80009dc:	4907      	ldr	r1, [pc, #28]	@ (80009fc <__NVIC_EnableIRQ+0x38>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	095b      	lsrs	r3, r3, #5
 80009e4:	2001      	movs	r0, #1
 80009e6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <initGPIO>:
#include "main.h"
#include "led.h"



void initGPIO(void) {
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000a04:	4b28      	ldr	r3, [pc, #160]	@ (8000aa8 <initGPIO+0xa8>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a08:	4a27      	ldr	r2, [pc, #156]	@ (8000aa8 <initGPIO+0xa8>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000a10:	4b25      	ldr	r3, [pc, #148]	@ (8000aa8 <initGPIO+0xa8>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a14:	4a24      	ldr	r2, [pc, #144]	@ (8000aa8 <initGPIO+0xa8>)
 8000a16:	f043 0302 	orr.w	r3, r3, #2
 8000a1a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	@ (8000aa8 <initGPIO+0xa8>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a20:	4a21      	ldr	r2, [pc, #132]	@ (8000aa8 <initGPIO+0xa8>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOA->MODER |= (0x1U << GPIO_MODER_MODE5_Pos);
 8000a28:	4b20      	ldr	r3, [pc, #128]	@ (8000aac <initGPIO+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000aac <initGPIO+0xac>)
 8000a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a32:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER |= (0x0U << GPIO_OTYPER_OT5_Pos);
 8000a34:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <initGPIO+0xac>)
 8000a36:	4a1d      	ldr	r2, [pc, #116]	@ (8000aac <initGPIO+0xac>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (0x0U << GPIO_OSPEEDR_OSPEED5_Pos);
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <initGPIO+0xac>)
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000aac <initGPIO+0xac>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR |= (0x0U << GPIO_PUPDR_PUPD5_Pos);
 8000a44:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <initGPIO+0xac>)
 8000a46:	4a19      	ldr	r2, [pc, #100]	@ (8000aac <initGPIO+0xac>)
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	60d3      	str	r3, [r2, #12]

    // PB0-4 are A,B,C,D,E pins
    GPIOB->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 | GPIO_MODER_MODE4);
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <initGPIO+0xb0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a17      	ldr	r2, [pc, #92]	@ (8000ab0 <initGPIO+0xb0>)
 8000a52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000a56:	f023 0303 	bic.w	r3, r3, #3
 8000a5a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE0_0 |
 8000a5c:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <initGPIO+0xb0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a13      	ldr	r2, [pc, #76]	@ (8000ab0 <initGPIO+0xb0>)
 8000a62:	f443 73aa 	orr.w	r3, r3, #340	@ 0x154
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6013      	str	r3, [r2, #0]
                    GPIO_MODER_MODE1_0 |
                    GPIO_MODER_MODE2_0 |
                    GPIO_MODER_MODE3_0 |
                    GPIO_MODER_MODE4_0;

    GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED0_0 | GPIO_OSPEEDR_OSPEED0_1 |
 8000a6c:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <initGPIO+0xb0>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <initGPIO+0xb0>)
 8000a72:	ea6f 2393 	mvn.w	r3, r3, lsr #10
 8000a76:	ea6f 2383 	mvn.w	r3, r3, lsl #10
 8000a7a:	6093      	str	r3, [r2, #8]
                      GPIO_OSPEEDR_OSPEED2_0 | GPIO_OSPEEDR_OSPEED2_1 |
                      GPIO_OSPEEDR_OSPEED3_0 | GPIO_OSPEEDR_OSPEED3_1 |
                      GPIO_OSPEEDR_OSPEED4_0 | GPIO_OSPEEDR_OSPEED4_1;

    // PC0-PC5 are RGB pins
    GPIOC->MODER |= GPIO_MODER_MODE0_0 |
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <initGPIO+0xb4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab4 <initGPIO+0xb4>)
 8000a82:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8000a86:	f043 0305 	orr.w	r3, r3, #5
 8000a8a:	6013      	str	r3, [r2, #0]
                    GPIO_MODER_MODE2_0 |
                    GPIO_MODER_MODE3_0 |
                    GPIO_MODER_MODE4_0 |
                    GPIO_MODER_MODE5_0;

    GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEED0_0 | GPIO_OSPEEDR_OSPEED0_1 |
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <initGPIO+0xb4>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <initGPIO+0xb4>)
 8000a92:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8000a96:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8000a9a:	6093      	str	r3, [r2, #8]
    GPIO_InitStruct.Pin = BOTON_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(BOTON_GPIO_Port, &GPIO_InitStruct);
    */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	40020800 	.word	0x40020800

08000ab8 <initDMA>:

void initDMA(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
     * Memory Inc
     * 1byte-1byte transfers
     * Memory to Peripheral
     */

    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <initDMA+0x70>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac0:	4a19      	ldr	r2, [pc, #100]	@ (8000b28 <initDMA+0x70>)
 8000ac2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ac6:	6313      	str	r3, [r2, #48]	@ 0x30

    DMA2_Stream2->CR |= (7<<DMA_SxCR_CHSEL_Pos) | DMA_SxCR_DBM | DMA_SxCR_PL_0 | DMA_SxCR_PL_1 | DMA_SxCR_MINC | DMA_SxCR_DIR_0;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <initDMA+0x74>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4917      	ldr	r1, [pc, #92]	@ (8000b2c <initDMA+0x74>)
 8000ace:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <initDMA+0x78>)
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	600b      	str	r3, [r1, #0]
    DMA2_Stream2->NDTR = 0x4000; // 64 col, 8 Bits per colour channel, 32 rows
 8000ad4:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <initDMA+0x74>)
 8000ad6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ada:	605a      	str	r2, [r3, #4]
    DMA2_Stream2->PAR = (uint32_t)&(GPIOC->ODR);
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <initDMA+0x74>)
 8000ade:	4a15      	ldr	r2, [pc, #84]	@ (8000b34 <initDMA+0x7c>)
 8000ae0:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)buffer1;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <initDMA+0x74>)
 8000ae4:	4a14      	ldr	r2, [pc, #80]	@ (8000b38 <initDMA+0x80>)
 8000ae6:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->M1AR = (uint32_t)buffer2;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <initDMA+0x74>)
 8000aea:	4a14      	ldr	r2, [pc, #80]	@ (8000b3c <initDMA+0x84>)
 8000aec:	611a      	str	r2, [r3, #16]
    DMA2_Stream2->FCR |= DMA_SxFCR_DMDIS; // turn on the FIFO
 8000aee:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <initDMA+0x74>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b2c <initDMA+0x74>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6153      	str	r3, [r2, #20]
    DMA2_Stream2->CR |= DMA_SxCR_TCIE; // enable the transfer complete interrupt
 8000afa:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <initDMA+0x74>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a0b      	ldr	r2, [pc, #44]	@ (8000b2c <initDMA+0x74>)
 8000b00:	f043 0310 	orr.w	r3, r3, #16
 8000b04:	6013      	str	r3, [r2, #0]
    DMA2->LIFCR |= DMA_LIFCR_CTCIF2; // make sure the interrupt flag is clear
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <initDMA+0x88>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000b40 <initDMA+0x88>)
 8000b0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b10:	6093      	str	r3, [r2, #8]

    NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b12:	203a      	movs	r0, #58	@ 0x3a
 8000b14:	f7ff ff56 	bl	80009c4 <__NVIC_EnableIRQ>

    DMA2_Stream2->CR |= DMA_SxCR_EN; // enable the stream
 8000b18:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <initDMA+0x74>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a03      	ldr	r2, [pc, #12]	@ (8000b2c <initDMA+0x74>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40026440 	.word	0x40026440
 8000b30:	0e070440 	.word	0x0e070440
 8000b34:	40020814 	.word	0x40020814
 8000b38:	2000949c 	.word	0x2000949c
 8000b3c:	2000d49c 	.word	0x2000d49c
 8000b40:	40026400 	.word	0x40026400

08000b44 <initClock>:

void initClock(void) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
    // 5. Set AHB/APB1/APB2 prescalers
    // 6. Wait for PLL lock
    // 7. Select PLL as sysclock
    // 8. Call SystemCoreClockUpdate();

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000b48:	4b31      	ldr	r3, [pc, #196]	@ (8000c10 <initClock+0xcc>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a30      	ldr	r2, [pc, #192]	@ (8000c10 <initClock+0xcc>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40

    // Enable the HSE in bypass mode (there is a 8MHz signal coming from the ST-LINK)
    RCC->CR |= RCC_CR_HSEBYP | RCC_CR_HSEON;
 8000b54:	4b2e      	ldr	r3, [pc, #184]	@ (8000c10 <initClock+0xcc>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a2d      	ldr	r2, [pc, #180]	@ (8000c10 <initClock+0xcc>)
 8000b5a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000b5e:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_HSERDY));
 8000b60:	bf00      	nop
 8000b62:	4b2b      	ldr	r3, [pc, #172]	@ (8000c10 <initClock+0xcc>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0f9      	beq.n	8000b62 <initClock+0x1e>

    // Set the main PLL M, N, P, Q, R, and HSE as the input
    // M = 4, N = 180, P = 2 = 180MHz SYSCLK
    // Q = 8, R = 4 (Q & R not used)
    RCC->PLLCFGR = RCC_PLLCFGR_PLLM_2 | (180 << RCC_PLLCFGR_PLLN_Pos) | (0 << RCC_PLLCFGR_PLLP_Pos) | RCC_PLLCFGR_PLLQ_3 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLSRC_HSE;
 8000b6e:	4b28      	ldr	r3, [pc, #160]	@ (8000c10 <initClock+0xcc>)
 8000b70:	4a28      	ldr	r2, [pc, #160]	@ (8000c14 <initClock+0xd0>)
 8000b72:	605a      	str	r2, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8000b74:	4b26      	ldr	r3, [pc, #152]	@ (8000c10 <initClock+0xcc>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a25      	ldr	r2, [pc, #148]	@ (8000c10 <initClock+0xcc>)
 8000b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b7e:	6013      	str	r3, [r2, #0]

    // enable and switch on overdrive
    PWR->CR |= PWR_CR_ODEN;
 8000b80:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <initClock+0xd4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a24      	ldr	r2, [pc, #144]	@ (8000c18 <initClock+0xd4>)
 8000b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b8a:	6013      	str	r3, [r2, #0]
    while(!(PWR->CSR & PWR_CSR_ODRDY));
 8000b8c:	bf00      	nop
 8000b8e:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <initClock+0xd4>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f9      	beq.n	8000b8e <initClock+0x4a>

    PWR->CR |= PWR_CR_ODSWEN;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <initClock+0xd4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c18 <initClock+0xd4>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba4:	6013      	str	r3, [r2, #0]
    while(!(PWR->CSR & PWR_CSR_ODSWRDY));
 8000ba6:	bf00      	nop
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <initClock+0xd4>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0f9      	beq.n	8000ba8 <initClock+0x64>

    // Set the flash wait time
    FLASH->ACR |= FLASH_ACR_LATENCY_5WS;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <initClock+0xd8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a18      	ldr	r2, [pc, #96]	@ (8000c1c <initClock+0xd8>)
 8000bba:	f043 0305 	orr.w	r3, r3, #5
 8000bbe:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLASH_ACR_LATENCY_5WS) {
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <initClock+0xd8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 030f 	and.w	r3, r3, #15
 8000bc8:	2b05      	cmp	r3, #5
 8000bca:	d001      	beq.n	8000bd0 <initClock+0x8c>
       Error_Handler();
 8000bcc:	f001 fe42 	bl	8002854 <Error_Handler>
    }

    // set APB prescalers
    // APB1 = 4, APB2 = 2
    // 45MHz and 90Mhz
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4 | RCC_CFGR_PPRE2_DIV2;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <initClock+0xcc>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <initClock+0xcc>)
 8000bd6:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 8000bda:	6093      	str	r3, [r2, #8]

    // wait for PLL lock
    while(!(RCC->CR & RCC_CR_PLLRDY));
 8000bdc:	bf00      	nop
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <initClock+0xcc>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f9      	beq.n	8000bde <initClock+0x9a>

    // Switch SYSCLK to PLL
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <initClock+0xcc>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <initClock+0xcc>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	6093      	str	r3, [r2, #8]


    SystemCoreClockUpdate();
 8000bf6:	f001 ff19 	bl	8002a2c <SystemCoreClockUpdate>

    // set TIMPRE so the timers run at 180MHz
    RCC->DCKCFGR |= RCC_DCKCFGR_TIMPRE;
 8000bfa:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <initClock+0xcc>)
 8000bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c00:	4a03      	ldr	r2, [pc, #12]	@ (8000c10 <initClock+0xcc>)
 8000c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	48402d04 	.word	0x48402d04
 8000c18:	40007000 	.word	0x40007000
 8000c1c:	40023c00 	.word	0x40023c00

08000c20 <initTimers>:

void initTimers(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
    // Timer 8, running 9Mhz 50% duty cycle
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000c24:	4b68      	ldr	r3, [pc, #416]	@ (8000dc8 <initTimers+0x1a8>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	4a67      	ldr	r2, [pc, #412]	@ (8000dc8 <initTimers+0x1a8>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOC->MODER |= GPIO_MODER_MODE6_1; // PC6 in AF mode
 8000c30:	4b66      	ldr	r3, [pc, #408]	@ (8000dcc <initTimers+0x1ac>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a65      	ldr	r2, [pc, #404]	@ (8000dcc <initTimers+0x1ac>)
 8000c36:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c3a:	6013      	str	r3, [r2, #0]
    GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEED6_0 | GPIO_OSPEEDR_OSPEED6_1; // high speed
 8000c3c:	4b63      	ldr	r3, [pc, #396]	@ (8000dcc <initTimers+0x1ac>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	4a62      	ldr	r2, [pc, #392]	@ (8000dcc <initTimers+0x1ac>)
 8000c42:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000c46:	6093      	str	r3, [r2, #8]
    GPIOC->AFR[0] |= (0x3U << GPIO_AFRL_AFSEL6_Pos); // AF3 for PC6 is TIM8_CH1
 8000c48:	4b60      	ldr	r3, [pc, #384]	@ (8000dcc <initTimers+0x1ac>)
 8000c4a:	6a1b      	ldr	r3, [r3, #32]
 8000c4c:	4a5f      	ldr	r2, [pc, #380]	@ (8000dcc <initTimers+0x1ac>)
 8000c4e:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8000c52:	6213      	str	r3, [r2, #32]

    RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8000c54:	4b5c      	ldr	r3, [pc, #368]	@ (8000dc8 <initTimers+0x1a8>)
 8000c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c58:	4a5b      	ldr	r2, [pc, #364]	@ (8000dc8 <initTimers+0x1a8>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	6453      	str	r3, [r2, #68]	@ 0x44

    TIM8->ARR = 19;
 8000c60:	4b5b      	ldr	r3, [pc, #364]	@ (8000dd0 <initTimers+0x1b0>)
 8000c62:	2213      	movs	r2, #19
 8000c64:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM8->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2; //PWM mode 1
 8000c66:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd0 <initTimers+0x1b0>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a59      	ldr	r2, [pc, #356]	@ (8000dd0 <initTimers+0x1b0>)
 8000c6c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000c70:	6193      	str	r3, [r2, #24]
    TIM8->DIER |= TIM_DIER_CC1DE; // DMA request on CH1 (falling edge of clock)
 8000c72:	4b57      	ldr	r3, [pc, #348]	@ (8000dd0 <initTimers+0x1b0>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	4a56      	ldr	r2, [pc, #344]	@ (8000dd0 <initTimers+0x1b0>)
 8000c78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7c:	60d3      	str	r3, [r2, #12]
    TIM8->CCR1 = 10;
 8000c7e:	4b54      	ldr	r3, [pc, #336]	@ (8000dd0 <initTimers+0x1b0>)
 8000c80:	220a      	movs	r2, #10
 8000c82:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM8->CCER |= TIM_CCER_CC1E; // OC1 enabled
 8000c84:	4b52      	ldr	r3, [pc, #328]	@ (8000dd0 <initTimers+0x1b0>)
 8000c86:	6a1b      	ldr	r3, [r3, #32]
 8000c88:	4a51      	ldr	r2, [pc, #324]	@ (8000dd0 <initTimers+0x1b0>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6213      	str	r3, [r2, #32]

    TIM8->BDTR |= TIM_BDTR_MOE; // Main output enabled.. if this isn't set, there is no output on the pins!
 8000c90:	4b4f      	ldr	r3, [pc, #316]	@ (8000dd0 <initTimers+0x1b0>)
 8000c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c94:	4a4e      	ldr	r2, [pc, #312]	@ (8000dd0 <initTimers+0x1b0>)
 8000c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c9a:	6453      	str	r3, [r2, #68]	@ 0x44

    TIM8->PSC = PRESCALE; // scale down for testing
 8000c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8000dd0 <initTimers+0x1b0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM8->EGR |= TIM_EGR_UG; // trigger a UEV to update the preload, auto-reload, and capture-compare shadow registers
 8000ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd0 <initTimers+0x1b0>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8000dd0 <initTimers+0x1b0>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6153      	str	r3, [r2, #20]
    TIM8->SR = 0;
 8000cae:	4b48      	ldr	r3, [pc, #288]	@ (8000dd0 <initTimers+0x1b0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
    TIM8->CR2 |= TIM_CR2_MMS_1; // Master mode - update
 8000cb4:	4b46      	ldr	r3, [pc, #280]	@ (8000dd0 <initTimers+0x1b0>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	4a45      	ldr	r2, [pc, #276]	@ (8000dd0 <initTimers+0x1b0>)
 8000cba:	f043 0320 	orr.w	r3, r3, #32
 8000cbe:	6053      	str	r3, [r2, #4]

    // Timer 5
    // LAT on CH1, output to PA0
    // OE on CH2, output to PA1
    GPIOA->MODER |= GPIO_MODER_MODE0_1; // PA0 in AF mode
 8000cc0:	4b44      	ldr	r3, [pc, #272]	@ (8000dd4 <initTimers+0x1b4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a43      	ldr	r2, [pc, #268]	@ (8000dd4 <initTimers+0x1b4>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	6013      	str	r3, [r2, #0]
    GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED0_0 | GPIO_OSPEEDR_OSPEED0_1; // high speed
 8000ccc:	4b41      	ldr	r3, [pc, #260]	@ (8000dd4 <initTimers+0x1b4>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	4a40      	ldr	r2, [pc, #256]	@ (8000dd4 <initTimers+0x1b4>)
 8000cd2:	f043 0303 	orr.w	r3, r3, #3
 8000cd6:	6093      	str	r3, [r2, #8]
    GPIOA->AFR[0] |= (0x2U << GPIO_AFRL_AFSEL0_Pos); // AF2 for PA0 is TIM5_CH1
 8000cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd4 <initTimers+0x1b4>)
 8000cda:	6a1b      	ldr	r3, [r3, #32]
 8000cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd4 <initTimers+0x1b4>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	6213      	str	r3, [r2, #32]

    GPIOA->MODER |= GPIO_MODER_MODE1_1; // PA1 in AF mode
 8000ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8000dd4 <initTimers+0x1b4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a3a      	ldr	r2, [pc, #232]	@ (8000dd4 <initTimers+0x1b4>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6013      	str	r3, [r2, #0]
    GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED1_0 | GPIO_OSPEEDR_OSPEED1_1; // high speed
 8000cf0:	4b38      	ldr	r3, [pc, #224]	@ (8000dd4 <initTimers+0x1b4>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	4a37      	ldr	r2, [pc, #220]	@ (8000dd4 <initTimers+0x1b4>)
 8000cf6:	f043 030c 	orr.w	r3, r3, #12
 8000cfa:	6093      	str	r3, [r2, #8]
    GPIOA->AFR[0] |= (0x2U << GPIO_AFRL_AFSEL1_Pos); // AF2 for PA1 is TIM5_CH2
 8000cfc:	4b35      	ldr	r3, [pc, #212]	@ (8000dd4 <initTimers+0x1b4>)
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
 8000d00:	4a34      	ldr	r2, [pc, #208]	@ (8000dd4 <initTimers+0x1b4>)
 8000d02:	f043 0320 	orr.w	r3, r3, #32
 8000d06:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000d08:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc8 <initTimers+0x1a8>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8000dc8 <initTimers+0x1a8>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	6413      	str	r3, [r2, #64]	@ 0x40

    TIM5->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_0; // select ITR3 as the trigger input (for TIM5, this is TIM8)
 8000d14:	4b30      	ldr	r3, [pc, #192]	@ (8000dd8 <initTimers+0x1b8>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd8 <initTimers+0x1b8>)
 8000d1a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000d1e:	6093      	str	r3, [r2, #8]
    TIM5->SMCR |= TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1; // slave mode set to trigger mode
 8000d20:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <initTimers+0x1b8>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd8 <initTimers+0x1b8>)
 8000d26:	f043 0306 	orr.w	r3, r3, #6
 8000d2a:	6093      	str	r3, [r2, #8]
    TIM5->ARR = 1279;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <initTimers+0x1b8>)
 8000d2e:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 8000d32:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM5->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2; //PWM mode 1
 8000d34:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <initTimers+0x1b8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a27      	ldr	r2, [pc, #156]	@ (8000dd8 <initTimers+0x1b8>)
 8000d3a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000d3e:	6193      	str	r3, [r2, #24]
    TIM5->CCR1 = 12;
 8000d40:	4b25      	ldr	r3, [pc, #148]	@ (8000dd8 <initTimers+0x1b8>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM5->CCER |= TIM_CCER_CC1E; // OC1 enabled
 8000d46:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <initTimers+0x1b8>)
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	4a23      	ldr	r2, [pc, #140]	@ (8000dd8 <initTimers+0x1b8>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6213      	str	r3, [r2, #32]

    TIM5->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2; //PWM mode 1
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <initTimers+0x1b8>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	4a20      	ldr	r2, [pc, #128]	@ (8000dd8 <initTimers+0x1b8>)
 8000d58:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000d5c:	6193      	str	r3, [r2, #24]
    TIM5->CCMR1 |= TIM_CCMR1_OC2PE; // preload enabled for CCR2
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <initTimers+0x1b8>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd8 <initTimers+0x1b8>)
 8000d64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d68:	6193      	str	r3, [r2, #24]
    TIM5->CCR2 = 1280; // start with OC2 (OE) held at 1 (off)
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <initTimers+0x1b8>)
 8000d6c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000d70:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM5->CCER |= TIM_CCER_CC2E; // OC2 enabled
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <initTimers+0x1b8>)
 8000d74:	6a1b      	ldr	r3, [r3, #32]
 8000d76:	4a18      	ldr	r2, [pc, #96]	@ (8000dd8 <initTimers+0x1b8>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	6213      	str	r3, [r2, #32]

    TIM5->PSC = PRESCALE; // scale down for testing
 8000d7e:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <initTimers+0x1b8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM5->EGR |= TIM_EGR_UG; // trigger a UEV to update the preload, auto-reload, and capture-compare shadow registers
 8000d84:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <initTimers+0x1b8>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	4a13      	ldr	r2, [pc, #76]	@ (8000dd8 <initTimers+0x1b8>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6153      	str	r3, [r2, #20]
    TIM5->SR = 0; // clear the status flags
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <initTimers+0x1b8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
    TIM5->DIER |= TIM_DIER_UIE; // enable TIM5 interrupt on UEV
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <initTimers+0x1b8>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd8 <initTimers+0x1b8>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	60d3      	str	r3, [r2, #12]
    TIM5->CNT = 15;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <initTimers+0x1b8>)
 8000da4:	220f      	movs	r2, #15
 8000da6:	625a      	str	r2, [r3, #36]	@ 0x24

    NVIC_EnableIRQ(TIM5_IRQn);
 8000da8:	2032      	movs	r0, #50	@ 0x32
 8000daa:	f7ff fe0b 	bl	80009c4 <__NVIC_EnableIRQ>

    // Start the timer
    TIM8->CR1 |= TIM_CR1_CEN;
 8000dae:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <initTimers+0x1b0>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a07      	ldr	r2, [pc, #28]	@ (8000dd0 <initTimers+0x1b0>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6013      	str	r3, [r2, #0]
    TIM5->CCR2 = 1280 - BRIGHTNESS; // put the first value in CCR2 preload it will be loaded at the first UEV
 8000dba:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <initTimers+0x1b8>)
 8000dbc:	f240 42f6 	movw	r2, #1270	@ 0x4f6
 8000dc0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	40010400 	.word	0x40010400
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40000c00 	.word	0x40000c00

08000ddc <init>:

void init(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    // enable the data and instruction cache and prefetch
    FLASH->ACR |= FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 8000de0:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <init+0x48>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0f      	ldr	r2, [pc, #60]	@ (8000e24 <init+0x48>)
 8000de6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000dea:	6013      	str	r3, [r2, #0]

    // This will set the clock to 180MHz
    initClock();
 8000dec:	f7ff feaa 	bl	8000b44 <initClock>
    SysTick_Init();
 8000df0:	f001 ff06 	bl	8002c00 <SysTick_Init>

    // Set up any input/output pins
    initGPIO();
 8000df4:	f7ff fe04 	bl	8000a00 <initGPIO>
    initDMA();
 8000df8:	f7ff fe5e 	bl	8000ab8 <initDMA>
    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM5_STOP;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <init+0x4c>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	4a09      	ldr	r2, [pc, #36]	@ (8000e28 <init+0x4c>)
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6093      	str	r3, [r2, #8]
    DBGMCU->APB2FZ |= DBGMCU_APB2_FZ_DBG_TIM8_STOP;
 8000e08:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <init+0x4c>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	4a06      	ldr	r2, [pc, #24]	@ (8000e28 <init+0x4c>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	60d3      	str	r3, [r2, #12]
    initTimers();
 8000e14:	f7ff ff04 	bl	8000c20 <initTimers>
    busyFlag = 1;
 8000e18:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <init+0x50>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023c00 	.word	0x40023c00
 8000e28:	e0042000 	.word	0xe0042000
 8000e2c:	2001154d 	.word	0x2001154d

08000e30 <TIM5_IRQHandler>:
#include "stm32f446xx.h"
#include "main.h"
#include "led_programs.h"

void TIM5_IRQHandler(void) {
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
    /* Clear the interrupt flag right away.
     * Due to pipelining, the register itself might not get updated for several
     * cycles. If we wait until the end of the ISR to clear the flag,
     * it can trigger again immediately */
    TIM5->SR &= ~TIM_SR_UIF_Msk;
 8000e34:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <TIM5_IRQHandler+0x8c>)
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	4a20      	ldr	r2, [pc, #128]	@ (8000ebc <TIM5_IRQHandler+0x8c>)
 8000e3a:	f023 0301 	bic.w	r3, r3, #1
 8000e3e:	6113      	str	r3, [r2, #16]

    if(bit == 0) { // the first 64 bits of a new row have been latched. Set the row select to match.
 8000e40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <TIM5_IRQHandler+0x90>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d119      	bne.n	8000e7e <TIM5_IRQHandler+0x4e>
        GPIOB->ODR = (GPIOB->ODR & ~(row_mask)) | row;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <TIM5_IRQHandler+0x94>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	f023 031f 	bic.w	r3, r3, #31
 8000e52:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec8 <TIM5_IRQHandler+0x98>)
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ec4 <TIM5_IRQHandler+0x94>)
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	6153      	str	r3, [r2, #20]
        row++;
 8000e60:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <TIM5_IRQHandler+0x98>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	3301      	adds	r3, #1
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <TIM5_IRQHandler+0x98>)
 8000e6c:	701a      	strb	r2, [r3, #0]
        row &= row_mask;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <TIM5_IRQHandler+0x98>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	f003 031f 	and.w	r3, r3, #31
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <TIM5_IRQHandler+0x98>)
 8000e7c:	701a      	strb	r2, [r3, #0]
    }
    bit++;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <TIM5_IRQHandler+0x90>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	3301      	adds	r3, #1
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <TIM5_IRQHandler+0x90>)
 8000e8a:	701a      	strb	r2, [r3, #0]
    bit &=  0x7;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <TIM5_IRQHandler+0x90>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <TIM5_IRQHandler+0x90>)
 8000e9a:	701a      	strb	r2, [r3, #0]
    TIM5->CCR2 = 1280 - (BRIGHTNESS * (1 << bit)); // set the duty cycle of the NEXT ~OE pulse
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <TIM5_IRQHandler+0x90>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	230a      	movs	r3, #10
 8000ea6:	4093      	lsls	r3, r2
 8000ea8:	f5c3 62a0 	rsb	r2, r3, #1280	@ 0x500
 8000eac:	4b03      	ldr	r3, [pc, #12]	@ (8000ebc <TIM5_IRQHandler+0x8c>)
 8000eae:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40000c00 	.word	0x40000c00
 8000ec0:	20011544 	.word	0x20011544
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	20011545 	.word	0x20011545

08000ecc <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void) {
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
    DMA2->LIFCR |= DMA_LIFCR_CTCIF2; // make sure the interrupt flag is clear
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <DMA2_Stream2_IRQHandler+0x2c>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	4a08      	ldr	r2, [pc, #32]	@ (8000ef8 <DMA2_Stream2_IRQHandler+0x2c>)
 8000ed6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eda:	6093      	str	r3, [r2, #8]
    frame_count++;
 8000edc:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <DMA2_Stream2_IRQHandler+0x30>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	4a06      	ldr	r2, [pc, #24]	@ (8000efc <DMA2_Stream2_IRQHandler+0x30>)
 8000ee4:	6013      	str	r3, [r2, #0]
    busyFlag = 0; // main loop watches this flag to know when to fill up the next buffer
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <DMA2_Stream2_IRQHandler+0x34>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40026400 	.word	0x40026400
 8000efc:	20011548 	.word	0x20011548
 8000f00:	2001154d 	.word	0x2001154d

08000f04 <mapf>:

RGB_t frame[WIDTH*HEIGHT];
uint8_t buffer1[WIDTH*BITS_PER_CHANNEL*SCAN_RATE];
uint8_t buffer2[WIDTH*BITS_PER_CHANNEL*SCAN_RATE];

float mapf(float value, float c_min, float c_max, float t_min, float t_max) {
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	@ 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f0e:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f12:	ed87 1a03 	vstr	s2, [r7, #12]
 8000f16:	edc7 1a02 	vstr	s3, [r7, #8]
 8000f1a:	ed87 2a01 	vstr	s4, [r7, #4]
	float res = (value - c_min) / (c_max - c_min) * (t_max - t_min) + t_min;
 8000f1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f22:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f26:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f3a:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f52:	edc7 7a07 	vstr	s15, [r7, #28]
    return res;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	ee07 3a90 	vmov	s15, r3
}
 8000f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f60:	3724      	adds	r7, #36	@ 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <bound>:

float bound(float value, float max, float min) {
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f74:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f78:	ed87 1a01 	vstr	s2, [r7, #4]
    return fmaxf(fminf(value, max), min);
 8000f7c:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f80:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f84:	f003 f8df 	bl	8004146 <fminf>
 8000f88:	eef0 7a40 	vmov.f32	s15, s0
 8000f8c:	eef0 0a67 	vmov.f32	s1, s15
 8000f90:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f94:	f003 f8ba 	bl	800410c <fmaxf>
 8000f98:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <LED_fillBuffer>:


void LED_fillBuffer(RGB_t *frame, uint8_t *buffer) {
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
    uint32_t i = 0, p1, p2;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    uint8_t bit, mask;
    for(uint8_t row = 0; row < SCAN_RATE; row++) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	76bb      	strb	r3, [r7, #26]
 8000fba:	e0b1      	b.n	8001120 <LED_fillBuffer+0x178>
        p1 = row * WIDTH;
 8000fbc:	7ebb      	ldrb	r3, [r7, #26]
 8000fbe:	019b      	lsls	r3, r3, #6
 8000fc0:	617b      	str	r3, [r7, #20]
        p2 = p1 + WIDTH * SCAN_RATE;
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000fc8:	613b      	str	r3, [r7, #16]
        for(bit = 0; bit < BITS_PER_CHANNEL; bit++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	76fb      	strb	r3, [r7, #27]
 8000fce:	e0a0      	b.n	8001112 <LED_fillBuffer+0x16a>
            mask = 1<<bit;
 8000fd0:	7efb      	ldrb	r3, [r7, #27]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	73fb      	strb	r3, [r7, #15]
            for(uint8_t col = 0; col < WIDTH; col++) {
 8000fda:	2300      	movs	r3, #0
 8000fdc:	767b      	strb	r3, [r7, #25]
 8000fde:	e091      	b.n	8001104 <LED_fillBuffer+0x15c>
                buffer[i] =
                    ((((gammaR[frame[p2+col].R]) & mask) >> bit) << 5) |
 8000fe0:	7e7a      	ldrb	r2, [r7, #25]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	441a      	add	r2, r3
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b50      	ldr	r3, [pc, #320]	@ (8001138 <LED_fillBuffer+0x190>)
 8000ff6:	5c9a      	ldrb	r2, [r3, r2]
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	461a      	mov	r2, r3
 8001000:	7efb      	ldrb	r3, [r7, #27]
 8001002:	fa42 f303 	asr.w	r3, r2, r3
 8001006:	015b      	lsls	r3, r3, #5
 8001008:	b259      	sxtb	r1, r3
                    ((((gammaG[frame[p2+col].G]) & mask) >> bit) << 4) |
 800100a:	7e7a      	ldrb	r2, [r7, #25]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	441a      	add	r2, r3
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	785b      	ldrb	r3, [r3, #1]
 800101c:	461a      	mov	r2, r3
 800101e:	4b47      	ldr	r3, [pc, #284]	@ (800113c <LED_fillBuffer+0x194>)
 8001020:	5c9a      	ldrb	r2, [r3, r2]
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	4013      	ands	r3, r2
 8001026:	b2db      	uxtb	r3, r3
 8001028:	461a      	mov	r2, r3
 800102a:	7efb      	ldrb	r3, [r7, #27]
 800102c:	fa42 f303 	asr.w	r3, r2, r3
 8001030:	011b      	lsls	r3, r3, #4
                    ((((gammaR[frame[p2+col].R]) & mask) >> bit) << 5) |
 8001032:	b25b      	sxtb	r3, r3
 8001034:	430b      	orrs	r3, r1
 8001036:	b259      	sxtb	r1, r3
                    ((((gammaB[frame[p2+col].B]) & mask) >> bit) << 3) |
 8001038:	7e7a      	ldrb	r2, [r7, #25]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	441a      	add	r2, r3
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	789b      	ldrb	r3, [r3, #2]
 800104a:	461a      	mov	r2, r3
 800104c:	4b3c      	ldr	r3, [pc, #240]	@ (8001140 <LED_fillBuffer+0x198>)
 800104e:	5c9a      	ldrb	r2, [r3, r2]
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	4013      	ands	r3, r2
 8001054:	b2db      	uxtb	r3, r3
 8001056:	461a      	mov	r2, r3
 8001058:	7efb      	ldrb	r3, [r7, #27]
 800105a:	fa42 f303 	asr.w	r3, r2, r3
 800105e:	00db      	lsls	r3, r3, #3
                    ((((gammaG[frame[p2+col].G]) & mask) >> bit) << 4) |
 8001060:	b25b      	sxtb	r3, r3
 8001062:	430b      	orrs	r3, r1
 8001064:	b259      	sxtb	r1, r3
                    ((((gammaR[frame[p1+col].R]) & mask) >> bit) << 2) |
 8001066:	7e7a      	ldrb	r2, [r7, #25]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	441a      	add	r2, r3
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <LED_fillBuffer+0x190>)
 800107c:	5c9a      	ldrb	r2, [r3, r2]
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	4013      	ands	r3, r2
 8001082:	b2db      	uxtb	r3, r3
 8001084:	461a      	mov	r2, r3
 8001086:	7efb      	ldrb	r3, [r7, #27]
 8001088:	fa42 f303 	asr.w	r3, r2, r3
 800108c:	009b      	lsls	r3, r3, #2
                    ((((gammaB[frame[p2+col].B]) & mask) >> bit) << 3) |
 800108e:	b25b      	sxtb	r3, r3
 8001090:	430b      	orrs	r3, r1
 8001092:	b259      	sxtb	r1, r3
                    ((((gammaG[frame[p1+col].G]) & mask) >> bit) << 1) |
 8001094:	7e7a      	ldrb	r2, [r7, #25]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	441a      	add	r2, r3
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <LED_fillBuffer+0x194>)
 80010aa:	5c9a      	ldrb	r2, [r3, r2]
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	4013      	ands	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	7efb      	ldrb	r3, [r7, #27]
 80010b6:	fa42 f303 	asr.w	r3, r2, r3
 80010ba:	005b      	lsls	r3, r3, #1
                    ((((gammaR[frame[p1+col].R]) & mask) >> bit) << 2) |
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	430b      	orrs	r3, r1
 80010c0:	b259      	sxtb	r1, r3
                    ((((gammaB[frame[p1+col].B]) & mask) >> bit) << 0);
 80010c2:	7e7a      	ldrb	r2, [r7, #25]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	441a      	add	r2, r3
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	789b      	ldrb	r3, [r3, #2]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <LED_fillBuffer+0x198>)
 80010d8:	5c9a      	ldrb	r2, [r3, r2]
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	4013      	ands	r3, r2
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	7efb      	ldrb	r3, [r7, #27]
 80010e4:	fa42 f303 	asr.w	r3, r2, r3
                    ((((gammaG[frame[p1+col].G]) & mask) >> bit) << 1) |
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	430b      	orrs	r3, r1
 80010ec:	b259      	sxtb	r1, r3
                buffer[i] =
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	4413      	add	r3, r2
                    ((((gammaG[frame[p1+col].G]) & mask) >> bit) << 1) |
 80010f4:	b2ca      	uxtb	r2, r1
                buffer[i] =
 80010f6:	701a      	strb	r2, [r3, #0]
                i++;
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	3301      	adds	r3, #1
 80010fc:	61fb      	str	r3, [r7, #28]
            for(uint8_t col = 0; col < WIDTH; col++) {
 80010fe:	7e7b      	ldrb	r3, [r7, #25]
 8001100:	3301      	adds	r3, #1
 8001102:	767b      	strb	r3, [r7, #25]
 8001104:	7e7b      	ldrb	r3, [r7, #25]
 8001106:	2b3f      	cmp	r3, #63	@ 0x3f
 8001108:	f67f af6a 	bls.w	8000fe0 <LED_fillBuffer+0x38>
        for(bit = 0; bit < BITS_PER_CHANNEL; bit++) {
 800110c:	7efb      	ldrb	r3, [r7, #27]
 800110e:	3301      	adds	r3, #1
 8001110:	76fb      	strb	r3, [r7, #27]
 8001112:	7efb      	ldrb	r3, [r7, #27]
 8001114:	2b07      	cmp	r3, #7
 8001116:	f67f af5b 	bls.w	8000fd0 <LED_fillBuffer+0x28>
    for(uint8_t row = 0; row < SCAN_RATE; row++) {
 800111a:	7ebb      	ldrb	r3, [r7, #26]
 800111c:	3301      	adds	r3, #1
 800111e:	76bb      	strb	r3, [r7, #26]
 8001120:	7ebb      	ldrb	r3, [r7, #26]
 8001122:	2b1f      	cmp	r3, #31
 8001124:	f67f af4a 	bls.w	8000fbc <LED_fillBuffer+0x14>
            }
        }
    }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	@ 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	08004bec 	.word	0x08004bec
 800113c:	08004cec 	.word	0x08004cec
 8001140:	08004dec 	.word	0x08004dec
 8001144:	00000000 	.word	0x00000000

08001148 <LED_waveEffect>:
#include <stdlib.h>
#include <string.h>
#include "main.h"
#include "led.h"

void LED_waveEffect(RGB_t *frame) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    static float time;
    float xx;
    uint8_t r, g, b;

    if(time > 2*M_PI) {
 8001150:	4ba5      	ldr	r3, [pc, #660]	@ (80013e8 <LED_waveEffect+0x2a0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fae5 	bl	8000724 <__aeabi_f2d>
 800115a:	a39d      	add	r3, pc, #628	@ (adr r3, 80013d0 <LED_waveEffect+0x288>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fbb6 	bl	80008d0 <__aeabi_dcmpgt>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <LED_waveEffect+0x2a>
        time = 0.0;
 800116a:	4b9f      	ldr	r3, [pc, #636]	@ (80013e8 <LED_waveEffect+0x2a0>)
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
    }

    for(uint8_t y = 0; y < HEIGHT; y++) {
 8001172:	2300      	movs	r3, #0
 8001174:	75fb      	strb	r3, [r7, #23]
 8001176:	e10e      	b.n	8001396 <LED_waveEffect+0x24e>
        for(uint8_t x = 0; x < WIDTH; x++) {
 8001178:	2300      	movs	r3, #0
 800117a:	75bb      	strb	r3, [r7, #22]
 800117c:	e104      	b.n	8001388 <LED_waveEffect+0x240>
            xx = mapf(x, 0, WIDTH-1, 0, 2*M_PI);
 800117e:	7dbb      	ldrb	r3, [r7, #22]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001188:	ed9f 2a98 	vldr	s4, [pc, #608]	@ 80013ec <LED_waveEffect+0x2a4>
 800118c:	eddf 1a98 	vldr	s3, [pc, #608]	@ 80013f0 <LED_waveEffect+0x2a8>
 8001190:	ed9f 1a98 	vldr	s2, [pc, #608]	@ 80013f4 <LED_waveEffect+0x2ac>
 8001194:	eddf 0a96 	vldr	s1, [pc, #600]	@ 80013f0 <LED_waveEffect+0x2a8>
 8001198:	eeb0 0a67 	vmov.f32	s0, s15
 800119c:	f7ff feb2 	bl	8000f04 <mapf>
 80011a0:	ed87 0a04 	vstr	s0, [r7, #16]
            r = 16 + 100 * (bound(sinf(xx + time + 2*M_PI/3), 0.5, -0.5) + 0.5);
 80011a4:	4b90      	ldr	r3, [pc, #576]	@ (80013e8 <LED_waveEffect+0x2a0>)
 80011a6:	ed93 7a00 	vldr	s14, [r3]
 80011aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b2:	ee17 0a90 	vmov	r0, s15
 80011b6:	f7ff fab5 	bl	8000724 <__aeabi_f2d>
 80011ba:	a387      	add	r3, pc, #540	@ (adr r3, 80013d8 <LED_waveEffect+0x290>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff f952 	bl	8000468 <__adddf3>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fbaa 	bl	8000924 <__aeabi_d2f>
 80011d0:	4603      	mov	r3, r0
 80011d2:	ee00 3a10 	vmov	s0, r3
 80011d6:	f002 ff53 	bl	8004080 <sinf>
 80011da:	eef0 7a40 	vmov.f32	s15, s0
 80011de:	eebe 1a00 	vmov.f32	s2, #224	@ 0xbf000000 -0.5
 80011e2:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80011e6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ea:	f7ff febe 	bl	8000f6a <bound>
 80011ee:	ee10 3a10 	vmov	r3, s0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fa96 	bl	8000724 <__aeabi_f2d>
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b7e      	ldr	r3, [pc, #504]	@ (80013f8 <LED_waveEffect+0x2b0>)
 80011fe:	f7ff f933 	bl	8000468 <__adddf3>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b7b      	ldr	r3, [pc, #492]	@ (80013fc <LED_waveEffect+0x2b4>)
 8001210:	f7fe fffa 	bl	8000208 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	4b77      	ldr	r3, [pc, #476]	@ (8001400 <LED_waveEffect+0x2b8>)
 8001222:	f7ff f921 	bl	8000468 <__adddf3>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fb59 	bl	80008e4 <__aeabi_d2uiz>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
            g = 16 + 100 * (bound(sinf(xx + time - 2*M_PI/3), 0.5, -0.5) + 0.5);
 8001236:	4b6c      	ldr	r3, [pc, #432]	@ (80013e8 <LED_waveEffect+0x2a0>)
 8001238:	ed93 7a00 	vldr	s14, [r3]
 800123c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	ee17 0a90 	vmov	r0, s15
 8001248:	f7ff fa6c 	bl	8000724 <__aeabi_f2d>
 800124c:	a362      	add	r3, pc, #392	@ (adr r3, 80013d8 <LED_waveEffect+0x290>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff f907 	bl	8000464 <__aeabi_dsub>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fb61 	bl	8000924 <__aeabi_d2f>
 8001262:	4603      	mov	r3, r0
 8001264:	ee00 3a10 	vmov	s0, r3
 8001268:	f002 ff0a 	bl	8004080 <sinf>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	eebe 1a00 	vmov.f32	s2, #224	@ 0xbf000000 -0.5
 8001274:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	f7ff fe75 	bl	8000f6a <bound>
 8001280:	ee10 3a10 	vmov	r3, s0
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fa4d 	bl	8000724 <__aeabi_f2d>
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	4b5a      	ldr	r3, [pc, #360]	@ (80013f8 <LED_waveEffect+0x2b0>)
 8001290:	f7ff f8ea 	bl	8000468 <__adddf3>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	4b56      	ldr	r3, [pc, #344]	@ (80013fc <LED_waveEffect+0x2b4>)
 80012a2:	f7fe ffb1 	bl	8000208 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	4b53      	ldr	r3, [pc, #332]	@ (8001400 <LED_waveEffect+0x2b8>)
 80012b4:	f7ff f8d8 	bl	8000468 <__adddf3>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fb10 	bl	80008e4 <__aeabi_d2uiz>
 80012c4:	4603      	mov	r3, r0
 80012c6:	73bb      	strb	r3, [r7, #14]
            b = 16 + 100 * (bound(sinf(xx + time         ), 0.5, -0.5) + 0.5);
 80012c8:	4b47      	ldr	r3, [pc, #284]	@ (80013e8 <LED_waveEffect+0x2a0>)
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d6:	eeb0 0a67 	vmov.f32	s0, s15
 80012da:	f002 fed1 	bl	8004080 <sinf>
 80012de:	eef0 7a40 	vmov.f32	s15, s0
 80012e2:	eebe 1a00 	vmov.f32	s2, #224	@ 0xbf000000 -0.5
 80012e6:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80012ea:	eeb0 0a67 	vmov.f32	s0, s15
 80012ee:	f7ff fe3c 	bl	8000f6a <bound>
 80012f2:	ee10 3a10 	vmov	r3, s0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fa14 	bl	8000724 <__aeabi_f2d>
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b3d      	ldr	r3, [pc, #244]	@ (80013f8 <LED_waveEffect+0x2b0>)
 8001302:	f7ff f8b1 	bl	8000468 <__adddf3>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b3a      	ldr	r3, [pc, #232]	@ (80013fc <LED_waveEffect+0x2b4>)
 8001314:	f7fe ff78 	bl	8000208 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b36      	ldr	r3, [pc, #216]	@ (8001400 <LED_waveEffect+0x2b8>)
 8001326:	f7ff f89f 	bl	8000468 <__adddf3>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fad7 	bl	80008e4 <__aeabi_d2uiz>
 8001336:	4603      	mov	r3, r0
 8001338:	737b      	strb	r3, [r7, #13]
            PIXEL(frame, x, y).R = r;
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	019a      	lsls	r2, r3, #6
 800133e:	7dbb      	ldrb	r3, [r7, #22]
 8001340:	4413      	add	r3, r2
 8001342:	461a      	mov	r2, r3
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	701a      	strb	r2, [r3, #0]
            PIXEL(frame, x, y).G = g;
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	019a      	lsls	r2, r3, #6
 8001356:	7dbb      	ldrb	r3, [r7, #22]
 8001358:	4413      	add	r3, r2
 800135a:	461a      	mov	r2, r3
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	7bba      	ldrb	r2, [r7, #14]
 8001368:	705a      	strb	r2, [r3, #1]
            PIXEL(frame, x, y).B = b;
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	019a      	lsls	r2, r3, #6
 800136e:	7dbb      	ldrb	r3, [r7, #22]
 8001370:	4413      	add	r3, r2
 8001372:	461a      	mov	r2, r3
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	7b7a      	ldrb	r2, [r7, #13]
 8001380:	709a      	strb	r2, [r3, #2]
        for(uint8_t x = 0; x < WIDTH; x++) {
 8001382:	7dbb      	ldrb	r3, [r7, #22]
 8001384:	3301      	adds	r3, #1
 8001386:	75bb      	strb	r3, [r7, #22]
 8001388:	7dbb      	ldrb	r3, [r7, #22]
 800138a:	2b3f      	cmp	r3, #63	@ 0x3f
 800138c:	f67f aef7 	bls.w	800117e <LED_waveEffect+0x36>
    for(uint8_t y = 0; y < HEIGHT; y++) {
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	3301      	adds	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	2b3f      	cmp	r3, #63	@ 0x3f
 800139a:	f67f aeed 	bls.w	8001178 <LED_waveEffect+0x30>
        }
    }
    time += 0.1;
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <LED_waveEffect+0x2a0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f9be 	bl	8000724 <__aeabi_f2d>
 80013a8:	a30d      	add	r3, pc, #52	@ (adr r3, 80013e0 <LED_waveEffect+0x298>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7ff f85b 	bl	8000468 <__adddf3>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fab3 	bl	8000924 <__aeabi_d2f>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a09      	ldr	r2, [pc, #36]	@ (80013e8 <LED_waveEffect+0x2a0>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	f3af 8000 	nop.w
 80013d0:	54442d18 	.word	0x54442d18
 80013d4:	401921fb 	.word	0x401921fb
 80013d8:	382d7365 	.word	0x382d7365
 80013dc:	4000c152 	.word	0x4000c152
 80013e0:	9999999a 	.word	0x9999999a
 80013e4:	3fb99999 	.word	0x3fb99999
 80013e8:	2001149c 	.word	0x2001149c
 80013ec:	40c90fdb 	.word	0x40c90fdb
 80013f0:	00000000 	.word	0x00000000
 80013f4:	427c0000 	.word	0x427c0000
 80013f8:	3fe00000 	.word	0x3fe00000
 80013fc:	40590000 	.word	0x40590000
 8001400:	40300000 	.word	0x40300000
 8001404:	00000000 	.word	0x00000000

08001408 <LED_plasmaEffect>:

void LED_plasmaEffect(RGB_t *frame) {
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    static float time;
    uint8_t r, g, b;
    float xx, yy;
    float v;
    float delta = 0.025;
 8001410:	4b25      	ldr	r3, [pc, #148]	@ (80014a8 <LED_plasmaEffect+0xa0>)
 8001412:	623b      	str	r3, [r7, #32]

    time += 0.025;
 8001414:	4b25      	ldr	r3, [pc, #148]	@ (80014ac <LED_plasmaEffect+0xa4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f983 	bl	8000724 <__aeabi_f2d>
 800141e:	a31e      	add	r3, pc, #120	@ (adr r3, 8001498 <LED_plasmaEffect+0x90>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f820 	bl	8000468 <__adddf3>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fa78 	bl	8000924 <__aeabi_d2f>
 8001434:	4603      	mov	r3, r0
 8001436:	4a1d      	ldr	r2, [pc, #116]	@ (80014ac <LED_plasmaEffect+0xa4>)
 8001438:	6013      	str	r3, [r2, #0]
    if(time > 12*M_PI) {
 800143a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <LED_plasmaEffect+0xa4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f970 	bl	8000724 <__aeabi_f2d>
 8001444:	a316      	add	r3, pc, #88	@ (adr r3, 80014a0 <LED_plasmaEffect+0x98>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff fa41 	bl	80008d0 <__aeabi_dcmpgt>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <LED_plasmaEffect+0x58>
        delta *= -1;
 8001454:	edd7 7a08 	vldr	s15, [r7, #32]
 8001458:	eef1 7a67 	vneg.f32	s15, s15
 800145c:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    for(uint8_t y = 0; y < HEIGHT; y++) {
 8001460:	2300      	movs	r3, #0
 8001462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001466:	e1b0      	b.n	80017ca <LED_plasmaEffect+0x3c2>
        yy = mapf(y, 0, HEIGHT-1, 0, 2*M_PI);
 8001468:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001474:	ed9f 2a0e 	vldr	s4, [pc, #56]	@ 80014b0 <LED_plasmaEffect+0xa8>
 8001478:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 80014b4 <LED_plasmaEffect+0xac>
 800147c:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 80014b8 <LED_plasmaEffect+0xb0>
 8001480:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80014b4 <LED_plasmaEffect+0xac>
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	f7ff fd3c 	bl	8000f04 <mapf>
 800148c:	ed87 0a07 	vstr	s0, [r7, #28]
        for(uint8_t x = 0; x < WIDTH; x++) {
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001496:	e18e      	b.n	80017b6 <LED_plasmaEffect+0x3ae>
 8001498:	9999999a 	.word	0x9999999a
 800149c:	3f999999 	.word	0x3f999999
 80014a0:	7f3321d2 	.word	0x7f3321d2
 80014a4:	4042d97c 	.word	0x4042d97c
 80014a8:	3ccccccd 	.word	0x3ccccccd
 80014ac:	200114a0 	.word	0x200114a0
 80014b0:	40c90fdb 	.word	0x40c90fdb
 80014b4:	00000000 	.word	0x00000000
 80014b8:	427c0000 	.word	0x427c0000
            xx = mapf(x, 0, WIDTH-1, 0, 2*M_PI);
 80014bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c8:	ed1f 2a07 	vldr	s4, [pc, #-28]	@ 80014b0 <LED_plasmaEffect+0xa8>
 80014cc:	ed5f 1a07 	vldr	s3, [pc, #-28]	@ 80014b4 <LED_plasmaEffect+0xac>
 80014d0:	ed1f 1a07 	vldr	s2, [pc, #-28]	@ 80014b8 <LED_plasmaEffect+0xb0>
 80014d4:	ed5f 0a09 	vldr	s1, [pc, #-36]	@ 80014b4 <LED_plasmaEffect+0xac>
 80014d8:	eeb0 0a67 	vmov.f32	s0, s15
 80014dc:	f7ff fd12 	bl	8000f04 <mapf>
 80014e0:	ed87 0a06 	vstr	s0, [r7, #24]

            v = sinf(xx + time);
 80014e4:	4bc2      	ldr	r3, [pc, #776]	@ (80017f0 <LED_plasmaEffect+0x3e8>)
 80014e6:	ed93 7a00 	vldr	s14, [r3]
 80014ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	eeb0 0a67 	vmov.f32	s0, s15
 80014f6:	f002 fdc3 	bl	8004080 <sinf>
 80014fa:	ed87 0a05 	vstr	s0, [r7, #20]
            v += sinf((yy + time) / 2.0);
 80014fe:	4bbc      	ldr	r3, [pc, #752]	@ (80017f0 <LED_plasmaEffect+0x3e8>)
 8001500:	ed93 7a00 	vldr	s14, [r3]
 8001504:	edd7 7a07 	vldr	s15, [r7, #28]
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001510:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001514:	eeb0 0a47 	vmov.f32	s0, s14
 8001518:	f002 fdb2 	bl	8004080 <sinf>
 800151c:	eeb0 7a40 	vmov.f32	s14, s0
 8001520:	edd7 7a05 	vldr	s15, [r7, #20]
 8001524:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001528:	edc7 7a05 	vstr	s15, [r7, #20]
            v += sinf((xx + yy + time) / 2.0);
 800152c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001530:	edd7 7a07 	vldr	s15, [r7, #28]
 8001534:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001538:	4bad      	ldr	r3, [pc, #692]	@ (80017f0 <LED_plasmaEffect+0x3e8>)
 800153a:	edd3 7a00 	vldr	s15, [r3]
 800153e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001542:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001546:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800154a:	eeb0 0a47 	vmov.f32	s0, s14
 800154e:	f002 fd97 	bl	8004080 <sinf>
 8001552:	eeb0 7a40 	vmov.f32	s14, s0
 8001556:	edd7 7a05 	vldr	s15, [r7, #20]
 800155a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800155e:	edc7 7a05 	vstr	s15, [r7, #20]
            float cx = xx + .5 * sinf(time/5.0);
 8001562:	69b8      	ldr	r0, [r7, #24]
 8001564:	f7ff f8de 	bl	8000724 <__aeabi_f2d>
 8001568:	4604      	mov	r4, r0
 800156a:	460d      	mov	r5, r1
 800156c:	4ba0      	ldr	r3, [pc, #640]	@ (80017f0 <LED_plasmaEffect+0x3e8>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001576:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800157a:	eeb0 0a47 	vmov.f32	s0, s14
 800157e:	f002 fd7f 	bl	8004080 <sinf>
 8001582:	ee10 3a10 	vmov	r3, s0
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff f8cc 	bl	8000724 <__aeabi_f2d>
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	4b98      	ldr	r3, [pc, #608]	@ (80017f4 <LED_plasmaEffect+0x3ec>)
 8001592:	f7fe fe39 	bl	8000208 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7fe ff63 	bl	8000468 <__adddf3>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff f9bb 	bl	8000924 <__aeabi_d2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	613b      	str	r3, [r7, #16]
            float cy = yy + .5 * cosf(time/3.0);
 80015b2:	69f8      	ldr	r0, [r7, #28]
 80015b4:	f7ff f8b6 	bl	8000724 <__aeabi_f2d>
 80015b8:	4604      	mov	r4, r0
 80015ba:	460d      	mov	r5, r1
 80015bc:	4b8c      	ldr	r3, [pc, #560]	@ (80017f0 <LED_plasmaEffect+0x3e8>)
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80015c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015ca:	eeb0 0a47 	vmov.f32	s0, s14
 80015ce:	f002 fd13 	bl	8003ff8 <cosf>
 80015d2:	ee10 3a10 	vmov	r3, s0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f8a4 	bl	8000724 <__aeabi_f2d>
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4b84      	ldr	r3, [pc, #528]	@ (80017f4 <LED_plasmaEffect+0x3ec>)
 80015e2:	f7fe fe11 	bl	8000208 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4620      	mov	r0, r4
 80015ec:	4629      	mov	r1, r5
 80015ee:	f7fe ff3b 	bl	8000468 <__adddf3>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff f993 	bl	8000924 <__aeabi_d2f>
 80015fe:	4603      	mov	r3, r0
 8001600:	60fb      	str	r3, [r7, #12]
            v += sinf(sqrtf((cx*cx+cy*cy)+1)+time);
 8001602:	edd7 7a04 	vldr	s15, [r7, #16]
 8001606:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800160a:	edd7 7a03 	vldr	s15, [r7, #12]
 800160e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001616:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800161a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800161e:	eeb0 0a67 	vmov.f32	s0, s15
 8001622:	f002 fccb 	bl	8003fbc <sqrtf>
 8001626:	eeb0 7a40 	vmov.f32	s14, s0
 800162a:	4b71      	ldr	r3, [pc, #452]	@ (80017f0 <LED_plasmaEffect+0x3e8>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001634:	eeb0 0a67 	vmov.f32	s0, s15
 8001638:	f002 fd22 	bl	8004080 <sinf>
 800163c:	eeb0 7a40 	vmov.f32	s14, s0
 8001640:	edd7 7a05 	vldr	s15, [r7, #20]
 8001644:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001648:	edc7 7a05 	vstr	s15, [r7, #20]
            v /= 2.0;
 800164c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001650:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001654:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001658:	edc7 7a05 	vstr	s15, [r7, #20]
            r = 255 * (sinf(v * M_PI) + 1) / 2;
 800165c:	6978      	ldr	r0, [r7, #20]
 800165e:	f7ff f861 	bl	8000724 <__aeabi_f2d>
 8001662:	a35f      	add	r3, pc, #380	@ (adr r3, 80017e0 <LED_plasmaEffect+0x3d8>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe fdce 	bl	8000208 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff f956 	bl	8000924 <__aeabi_d2f>
 8001678:	4603      	mov	r3, r0
 800167a:	ee00 3a10 	vmov	s0, r3
 800167e:	f002 fcff 	bl	8004080 <sinf>
 8001682:	eef0 7a40 	vmov.f32	s15, s0
 8001686:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800168a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800168e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80017f8 <LED_plasmaEffect+0x3f0>
 8001692:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001696:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800169a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800169e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a2:	edc7 7a00 	vstr	s15, [r7]
 80016a6:	783b      	ldrb	r3, [r7, #0]
 80016a8:	72fb      	strb	r3, [r7, #11]
            g = 255 * (cosf(v * M_PI) + 1) / 2;
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff f83a 	bl	8000724 <__aeabi_f2d>
 80016b0:	a34b      	add	r3, pc, #300	@ (adr r3, 80017e0 <LED_plasmaEffect+0x3d8>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe fda7 	bl	8000208 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff f92f 	bl	8000924 <__aeabi_d2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	ee00 3a10 	vmov	s0, r3
 80016cc:	f002 fc94 	bl	8003ff8 <cosf>
 80016d0:	eef0 7a40 	vmov.f32	s15, s0
 80016d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016dc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80017f8 <LED_plasmaEffect+0x3f0>
 80016e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80016e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f0:	edc7 7a00 	vstr	s15, [r7]
 80016f4:	783b      	ldrb	r3, [r7, #0]
 80016f6:	72bb      	strb	r3, [r7, #10]
            b = 128 * (sinf(v * M_PI + 2*M_PI/3) + 1) / 2;
 80016f8:	6978      	ldr	r0, [r7, #20]
 80016fa:	f7ff f813 	bl	8000724 <__aeabi_f2d>
 80016fe:	a338      	add	r3, pc, #224	@ (adr r3, 80017e0 <LED_plasmaEffect+0x3d8>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe fd80 	bl	8000208 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	a335      	add	r3, pc, #212	@ (adr r3, 80017e8 <LED_plasmaEffect+0x3e0>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7fe fea7 	bl	8000468 <__adddf3>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff f8ff 	bl	8000924 <__aeabi_d2f>
 8001726:	4603      	mov	r3, r0
 8001728:	ee00 3a10 	vmov	s0, r3
 800172c:	f002 fca8 	bl	8004080 <sinf>
 8001730:	eef0 7a40 	vmov.f32	s15, s0
 8001734:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001738:	ee77 7a87 	vadd.f32	s15, s15, s14
 800173c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80017fc <LED_plasmaEffect+0x3f4>
 8001740:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001744:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001750:	edc7 7a00 	vstr	s15, [r7]
 8001754:	783b      	ldrb	r3, [r7, #0]
 8001756:	727b      	strb	r3, [r7, #9]
            PIXEL(frame, x, y).R = r;
 8001758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800175c:	019a      	lsls	r2, r3, #6
 800175e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001762:	4413      	add	r3, r2
 8001764:	461a      	mov	r2, r3
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	7afa      	ldrb	r2, [r7, #11]
 8001772:	701a      	strb	r2, [r3, #0]
            PIXEL(frame, x, y).G = g;
 8001774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001778:	019a      	lsls	r2, r3, #6
 800177a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800177e:	4413      	add	r3, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	7aba      	ldrb	r2, [r7, #10]
 800178e:	705a      	strb	r2, [r3, #1]
            PIXEL(frame, x, y).B = b;
 8001790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001794:	019a      	lsls	r2, r3, #6
 8001796:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800179a:	4413      	add	r3, r2
 800179c:	461a      	mov	r2, r3
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	7a7a      	ldrb	r2, [r7, #9]
 80017aa:	709a      	strb	r2, [r3, #2]
        for(uint8_t x = 0; x < WIDTH; x++) {
 80017ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017b0:	3301      	adds	r3, #1
 80017b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80017bc:	f67f ae7e 	bls.w	80014bc <LED_plasmaEffect+0xb4>
    for(uint8_t y = 0; y < HEIGHT; y++) {
 80017c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017c4:	3301      	adds	r3, #1
 80017c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80017d0:	f67f ae4a 	bls.w	8001468 <LED_plasmaEffect+0x60>
        }
    }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	@ 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bdb0      	pop	{r4, r5, r7, pc}
 80017de:	bf00      	nop
 80017e0:	54442d18 	.word	0x54442d18
 80017e4:	400921fb 	.word	0x400921fb
 80017e8:	382d7365 	.word	0x382d7365
 80017ec:	4000c152 	.word	0x4000c152
 80017f0:	200114a0 	.word	0x200114a0
 80017f4:	3fe00000 	.word	0x3fe00000
 80017f8:	437f0000 	.word	0x437f0000
 80017fc:	43000000 	.word	0x43000000

08001800 <LED_rectangle>:

void LED_rectangle(RGB_t *frame, RGB_t color, uint8_t min_row, uint8_t max_row, uint8_t min_col, uint8_t max_col){
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	4611      	mov	r1, r2
 800180c:	461a      	mov	r2, r3
 800180e:	460b      	mov	r3, r1
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	4613      	mov	r3, r2
 8001814:	71bb      	strb	r3, [r7, #6]
 // Limitar los valores a los rangos del marco
    if (min_col >= WIDTH) min_col = WIDTH - 1;
 8001816:	f897 3020 	ldrb.w	r3, [r7, #32]
 800181a:	2b3f      	cmp	r3, #63	@ 0x3f
 800181c:	d902      	bls.n	8001824 <LED_rectangle+0x24>
 800181e:	233f      	movs	r3, #63	@ 0x3f
 8001820:	f887 3020 	strb.w	r3, [r7, #32]
    if (max_col >= WIDTH) max_col = WIDTH - 1;
 8001824:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001828:	2b3f      	cmp	r3, #63	@ 0x3f
 800182a:	d902      	bls.n	8001832 <LED_rectangle+0x32>
 800182c:	233f      	movs	r3, #63	@ 0x3f
 800182e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    if (min_row >= HEIGHT) min_row = HEIGHT - 1;
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b3f      	cmp	r3, #63	@ 0x3f
 8001836:	d901      	bls.n	800183c <LED_rectangle+0x3c>
 8001838:	233f      	movs	r3, #63	@ 0x3f
 800183a:	71fb      	strb	r3, [r7, #7]
    if (max_row >= HEIGHT) max_row = HEIGHT - 1;
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001840:	d901      	bls.n	8001846 <LED_rectangle+0x46>
 8001842:	233f      	movs	r3, #63	@ 0x3f
 8001844:	71bb      	strb	r3, [r7, #6]

    for (uint8_t row = min_row; row <= max_row; row++) {
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	75fb      	strb	r3, [r7, #23]
 800184a:	e02b      	b.n	80018a4 <LED_rectangle+0xa4>
        for (uint8_t col = min_col; col <= max_col; col++) {
 800184c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001850:	75bb      	strb	r3, [r7, #22]
 8001852:	e01f      	b.n	8001894 <LED_rectangle+0x94>
            // Calculamos la posición en el frame
            uint32_t index = row * WIDTH + col;
 8001854:	7dfb      	ldrb	r3, [r7, #23]
 8001856:	019a      	lsls	r2, r3, #6
 8001858:	7dbb      	ldrb	r3, [r7, #22]
 800185a:	4413      	add	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
            // Establecemos el color en el frame
            frame[index].R = color.R;
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	7a3a      	ldrb	r2, [r7, #8]
 800186c:	701a      	strb	r2, [r3, #0]
            frame[index].G = color.G;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4413      	add	r3, r2
 800187a:	7a7a      	ldrb	r2, [r7, #9]
 800187c:	705a      	strb	r2, [r3, #1]
            frame[index].B = color.B;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4413      	add	r3, r2
 800188a:	7aba      	ldrb	r2, [r7, #10]
 800188c:	709a      	strb	r2, [r3, #2]
        for (uint8_t col = min_col; col <= max_col; col++) {
 800188e:	7dbb      	ldrb	r3, [r7, #22]
 8001890:	3301      	adds	r3, #1
 8001892:	75bb      	strb	r3, [r7, #22]
 8001894:	7dba      	ldrb	r2, [r7, #22]
 8001896:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800189a:	429a      	cmp	r2, r3
 800189c:	d9da      	bls.n	8001854 <LED_rectangle+0x54>
    for (uint8_t row = min_row; row <= max_row; row++) {
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	3301      	adds	r3, #1
 80018a2:	75fb      	strb	r3, [r7, #23]
 80018a4:	7dfa      	ldrb	r2, [r7, #23]
 80018a6:	79bb      	ldrb	r3, [r7, #6]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d9cf      	bls.n	800184c <LED_rectangle+0x4c>
        };
    };
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	371c      	adds	r7, #28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <LED_analog_bar>:

void LED_analog_bar(RGB_t *frame, RGB_t color_1, RGB_t color_2, float percentage) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	ed87 0a00 	vstr	s0, [r7]
    // Asegurarnos de que 'percentage' está en el rango 0.0 - 1.0
    if (percentage < 0.0f) percentage = 0.0f;
 80018cc:	edd7 7a00 	vldr	s15, [r7]
 80018d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	d502      	bpl.n	80018e0 <LED_analog_bar+0x24>
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	603b      	str	r3, [r7, #0]
    if (percentage > 1.0f) percentage = 1.0f;
 80018e0:	edd7 7a00 	vldr	s15, [r7]
 80018e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f0:	dd02      	ble.n	80018f8 <LED_analog_bar+0x3c>
 80018f2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80018f6:	603b      	str	r3, [r7, #0]

    // Calcular la línea de separación
    uint32_t separation_line = (uint32_t)((1.0f - percentage) * HEIGHT);
 80018f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018fc:	edd7 7a00 	vldr	s15, [r7]
 8001900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001904:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800195c <LED_analog_bar+0xa0>
 8001908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001910:	ee17 3a90 	vmov	r3, s15
 8001914:	617b      	str	r3, [r7, #20]

    // Llenar con color_1 desde separation_line hasta la parte superior
    if (separation_line < HEIGHT) {
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b3f      	cmp	r3, #63	@ 0x3f
 800191a:	d80a      	bhi.n	8001932 <LED_analog_bar+0x76>
        LED_rectangle(frame, color_1, separation_line, HEIGHT - 1, 0, WIDTH - 1);
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	233f      	movs	r3, #63	@ 0x3f
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	2300      	movs	r3, #0
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	233f      	movs	r3, #63	@ 0x3f
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7ff ff67 	bl	8001800 <LED_rectangle>
    }

    // Llenar con color_2 desde la parte inferior hasta separation_line
    if (separation_line > 0) {
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00c      	beq.n	8001952 <LED_analog_bar+0x96>
        LED_rectangle(frame, color_2, 0, separation_line - 1, 0, WIDTH - 1);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	3b01      	subs	r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	223f      	movs	r2, #63	@ 0x3f
 8001942:	9201      	str	r2, [sp, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	9200      	str	r2, [sp, #0]
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7ff ff57 	bl	8001800 <LED_rectangle>
    }
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	42800000 	.word	0x42800000

08001960 <LED_Letter>:


void LED_Letter(RGB_t *frame, uint8_t *letter, uint8_t x_i, uint8_t y_i, RGB_t color, uint8_t circular) {
 8001960:	b480      	push	{r7}
 8001962:	b08b      	sub	sp, #44	@ 0x2c
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	4611      	mov	r1, r2
 800196c:	461a      	mov	r2, r3
 800196e:	460b      	mov	r3, r1
 8001970:	71fb      	strb	r3, [r7, #7]
 8001972:	4613      	mov	r3, r2
 8001974:	71bb      	strb	r3, [r7, #6]
    // Iteramos por cada píxel de la letra
    for (uint8_t x = 0; x < TEXT_WIDTH; x++) {
 8001976:	2300      	movs	r3, #0
 8001978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800197c:	e070      	b.n	8001a60 <LED_Letter+0x100>
        for (uint8_t y = 0; y < TEXT_HEIGHT; y++) {
 800197e:	2300      	movs	r3, #0
 8001980:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001984:	e063      	b.n	8001a4e <LED_Letter+0xee>
            int16_t frame_x = (circular)? (x+x_i)%WIDTH: x + x_i; // Posición x en el marco
 8001986:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <LED_Letter+0x42>
 800198e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4413      	add	r3, r2
 8001996:	b2db      	uxtb	r3, r3
 8001998:	b21b      	sxth	r3, r3
 800199a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800199e:	b21b      	sxth	r3, r3
 80019a0:	e007      	b.n	80019b2 <LED_Letter+0x52>
 80019a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            int16_t frame_y = y + y_i; // Posición y en el marco
 80019b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	79bb      	ldrb	r3, [r7, #6]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4413      	add	r3, r2
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	847b      	strh	r3, [r7, #34]	@ 0x22
            uint32_t letter_index = x + y * TEXT_WIDTH;
 80019c4:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80019c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	61fb      	str	r3, [r7, #28]

            // Si el píxel está dentro del marco, lo dibujamos
            if (frame_x >= 0 && frame_x < WIDTH && frame_y >= 0 && frame_y < HEIGHT) {
 80019d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db32      	blt.n	8001a44 <LED_Letter+0xe4>
 80019de:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80019e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80019e4:	dc2e      	bgt.n	8001a44 <LED_Letter+0xe4>
 80019e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db2a      	blt.n	8001a44 <LED_Letter+0xe4>
 80019ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80019f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80019f4:	dc26      	bgt.n	8001a44 <LED_Letter+0xe4>
                uint32_t index = frame_x + frame_y * WIDTH;
 80019f6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80019fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80019fe:	019b      	lsls	r3, r3, #6
 8001a00:	4413      	add	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]

                // Dibujamos solo si el píxel de la letra está activo
                if (letter[letter_index]) {
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	4413      	add	r3, r2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00d      	beq.n	8001a2c <LED_Letter+0xcc>
                    frame[index] = color; 
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a22:	8819      	ldrh	r1, [r3, #0]
 8001a24:	789b      	ldrb	r3, [r3, #2]
 8001a26:	8011      	strh	r1, [r2, #0]
 8001a28:	7093      	strb	r3, [r2, #2]
 8001a2a:	e00b      	b.n	8001a44 <LED_Letter+0xe4>
                } else {
                    frame[index] = (RGB_t){0x00, 0x00, 0x00};
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	705a      	strb	r2, [r3, #1]
 8001a40:	2200      	movs	r2, #0
 8001a42:	709a      	strb	r2, [r3, #2]
        for (uint8_t y = 0; y < TEXT_HEIGHT; y++) {
 8001a44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001a4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d997      	bls.n	8001986 <LED_Letter+0x26>
    for (uint8_t x = 0; x < TEXT_WIDTH; x++) {
 8001a56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d98a      	bls.n	800197e <LED_Letter+0x1e>
                }
            }
        }
    }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	372c      	adds	r7, #44	@ 0x2c
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LED_Text>:
    const char *str, 
    uint8_t x_i, 
    uint8_t y_i, 
    RGB_t color, 
    uint8_t enable_line_wrap
) {
 8001a76:	b590      	push	{r4, r7, lr}
 8001a78:	b08b      	sub	sp, #44	@ 0x2c
 8001a7a:	af02      	add	r7, sp, #8
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	70fb      	strb	r3, [r7, #3]
    uint8_t cursor_x = x_i;
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	77fb      	strb	r3, [r7, #31]
    uint8_t cursor_y = y_i;
 8001a88:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a8c:	77bb      	strb	r3, [r7, #30]

    // Iteramos sobre cada caracter en el string
    for (const char *c = str; *c != '\0'; c++) {
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	e03b      	b.n	8001b0c <LED_Text+0x96>
        // Ignoramos caracteres fuera del rango 'a' a 'z'
        if (*c < 'a' || *c > 'z') {
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b60      	cmp	r3, #96	@ 0x60
 8001a9a:	d933      	bls.n	8001b04 <LED_Text+0x8e>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b7a      	cmp	r3, #122	@ 0x7a
 8001aa2:	d82f      	bhi.n	8001b04 <LED_Text+0x8e>
            continue;
        }

        // Accedemos a la matriz correspondiente al carácter desde el font
        uint8_t *letter = font[*c - 'a'];
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001aac:	3b61      	subs	r3, #97	@ 0x61
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	617b      	str	r3, [r7, #20]

        // Dibujamos la letra en la posición actual
        LED_Letter(frame, letter, cursor_x, cursor_y, color,0);
 8001ab8:	7fb8      	ldrb	r0, [r7, #30]
 8001aba:	7ff9      	ldrb	r1, [r7, #31]
 8001abc:	2300      	movs	r3, #0
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	466b      	mov	r3, sp
 8001ac2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	4614      	mov	r4, r2
 8001aca:	801c      	strh	r4, [r3, #0]
 8001acc:	3302      	adds	r3, #2
 8001ace:	0c12      	lsrs	r2, r2, #16
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	6979      	ldr	r1, [r7, #20]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff ff41 	bl	8001960 <LED_Letter>

        // Movemos el cursor para la próxima letra
        cursor_x += TEXT_WIDTH + 1; // Espacio entre letras
 8001ade:	7ffb      	ldrb	r3, [r7, #31]
 8001ae0:	3306      	adds	r3, #6
 8001ae2:	77fb      	strb	r3, [r7, #31]

        // Si la letra excede el ancho del frame
        if (cursor_x + TEXT_WIDTH > WIDTH) {
 8001ae4:	7ffb      	ldrb	r3, [r7, #31]
 8001ae6:	2b3b      	cmp	r3, #59	@ 0x3b
 8001ae8:	d908      	bls.n	8001afc <LED_Text+0x86>
            if (enable_line_wrap) {
 8001aea:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d011      	beq.n	8001b16 <LED_Text+0xa0>
                // Salto de línea si está habilitado
                cursor_x = x_i;
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	77fb      	strb	r3, [r7, #31]
                cursor_y += TEXT_HEIGHT + 1; // Espacio entre líneas
 8001af6:	7fbb      	ldrb	r3, [r7, #30]
 8001af8:	3308      	adds	r3, #8
 8001afa:	77bb      	strb	r3, [r7, #30]
                break;
            }
        }

        // Salimos si excedemos los límites verticales
        if (cursor_y + TEXT_HEIGHT > HEIGHT) {
 8001afc:	7fbb      	ldrb	r3, [r7, #30]
 8001afe:	2b39      	cmp	r3, #57	@ 0x39
 8001b00:	d80b      	bhi.n	8001b1a <LED_Text+0xa4>
 8001b02:	e000      	b.n	8001b06 <LED_Text+0x90>
            continue;
 8001b04:	bf00      	nop
    for (const char *c = str; *c != '\0'; c++) {
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1bf      	bne.n	8001a94 <LED_Text+0x1e>
            break;
        }
    }
}
 8001b14:	e002      	b.n	8001b1c <LED_Text+0xa6>
                break;
 8001b16:	bf00      	nop
 8001b18:	e000      	b.n	8001b1c <LED_Text+0xa6>
            break;
 8001b1a:	bf00      	nop
}
 8001b1c:	bf00      	nop
 8001b1e:	3724      	adds	r7, #36	@ 0x24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd90      	pop	{r4, r7, pc}

08001b24 <LED_SliddingText>:
    uint8_t x_i, 
    uint8_t y_i, 
    RGB_t color, 
    uint8_t enable_line_wrap,
    uint8_t direction
) {
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b08d      	sub	sp, #52	@ 0x34
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	70fb      	strb	r3, [r7, #3]
    static uint32_t contador_frames =0;
    uint32_t frames_por_desplazamiento = 6;
 8001b32:	2306      	movs	r3, #6
 8001b34:	61fb      	str	r3, [r7, #28]
    uint8_t desplazamiento = (uint8_t)(contador_frames/frames_por_desplazamiento)*direction;
 8001b36:	4b39      	ldr	r3, [pc, #228]	@ (8001c1c <LED_SliddingText+0xf8>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8001b46:	fb12 f303 	smulbb	r3, r2, r3
 8001b4a:	76fb      	strb	r3, [r7, #27]
    
    uint8_t cursor_x = x_i;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t cursor_y = y_i;
 8001b52:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001b56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t cursor_actual;

    // Iteramos sobre cada caracter en el string
    for (const char *c = str; *c != '\0'; c++) {
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	e04b      	b.n	8001bf8 <LED_SliddingText+0xd4>
        // Ignoramos caracteres fuera del rango 'a' a 'z'
        if (*c < 'a' || *c > 'z') {
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b60      	cmp	r3, #96	@ 0x60
 8001b66:	d943      	bls.n	8001bf0 <LED_SliddingText+0xcc>
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b7a      	cmp	r3, #122	@ 0x7a
 8001b6e:	d83f      	bhi.n	8001bf0 <LED_SliddingText+0xcc>
            continue;
        }

        // Accedemos a la matriz correspondiente al carácter desde el font
        uint8_t *letter = font[*c - 'a'];
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b78:	3b61      	subs	r3, #97	@ 0x61
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	4413      	add	r3, r2
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	617b      	str	r3, [r7, #20]
        
        // Si el cursor sobresale hay que traerlo devuelta
        cursor_actual = (cursor_x+desplazamiento)%WIDTH;
 8001b84:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001b88:	7efb      	ldrb	r3, [r7, #27]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b92:	74fb      	strb	r3, [r7, #19]
        // Dibujamos la letra en la posición actual
        LED_Letter(frame, letter, cursor_actual, cursor_y, color,1);
 8001b94:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8001b98:	7cf9      	ldrb	r1, [r7, #19]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	466b      	mov	r3, sp
 8001ba0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	4614      	mov	r4, r2
 8001ba8:	801c      	strh	r4, [r3, #0]
 8001baa:	3302      	adds	r3, #2
 8001bac:	0c12      	lsrs	r2, r2, #16
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	6979      	ldr	r1, [r7, #20]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7ff fed2 	bl	8001960 <LED_Letter>

        // Movemos el cursor para la próxima letra
        cursor_x += TEXT_WIDTH + 1; // Espacio entre letras
 8001bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bc0:	3306      	adds	r3, #6
 8001bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        // Si la letra excede el ancho del frame
        if (cursor_x + TEXT_WIDTH > WIDTH) {
 8001bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bca:	2b3b      	cmp	r3, #59	@ 0x3b
 8001bcc:	d90b      	bls.n	8001be6 <LED_SliddingText+0xc2>
            if (enable_line_wrap) {
 8001bce:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d015      	beq.n	8001c02 <LED_SliddingText+0xde>
                // Salto de línea si está habilitado
                cursor_x = x_i;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                cursor_y += TEXT_HEIGHT + 1; // Espacio entre líneas
 8001bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001be0:	3308      	adds	r3, #8
 8001be2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                break;
            }
        }

        // Salimos si excedemos los límites verticales
        if (cursor_y + TEXT_HEIGHT > HEIGHT) {
 8001be6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001bea:	2b39      	cmp	r3, #57	@ 0x39
 8001bec:	d80b      	bhi.n	8001c06 <LED_SliddingText+0xe2>
 8001bee:	e000      	b.n	8001bf2 <LED_SliddingText+0xce>
            continue;
 8001bf0:	bf00      	nop
    for (const char *c = str; *c != '\0'; c++) {
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1af      	bne.n	8001b60 <LED_SliddingText+0x3c>
 8001c00:	e002      	b.n	8001c08 <LED_SliddingText+0xe4>
                break;
 8001c02:	bf00      	nop
 8001c04:	e000      	b.n	8001c08 <LED_SliddingText+0xe4>
            break;
 8001c06:	bf00      	nop
        }
    }
    contador_frames++;
 8001c08:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <LED_SliddingText+0xf8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	4a03      	ldr	r2, [pc, #12]	@ (8001c1c <LED_SliddingText+0xf8>)
 8001c10:	6013      	str	r3, [r2, #0]
}
 8001c12:	bf00      	nop
 8001c14:	372c      	adds	r7, #44	@ 0x2c
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200114a4 	.word	0x200114a4

08001c20 <LED_FallingSand>:


void LED_FallingSand(RGB_t *frame) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	f5ad 4d80 	sub.w	sp, sp, #16384	@ 0x4000
 8001c26:	b090      	sub	sp, #64	@ 0x40
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c2e:	f843 0c3c 	str.w	r0, [r3, #-60]
    RGB_t *frame_auxiliar = (RGB_t *)malloc(WIDTH * HEIGHT * sizeof(RGB_t));
 8001c32:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8001c36:	f002 f867 	bl	8003d08 <malloc>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001c40:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001c44:	6013      	str	r3, [r2, #0]

    if (frame_auxiliar == NULL) {
 8001c46:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001c4a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 835b 	beq.w	800230c <LED_FallingSand+0x6ec>
        return;
    }

    memcpy(frame_auxiliar, frame, WIDTH * HEIGHT * sizeof(RGB_t));
 8001c56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c5a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001c5e:	f853 1c3c 	ldr.w	r1, [r3, #-60]
 8001c62:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001c66:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	f002 f94e 	bl	8003f0c <memcpy>

    uint16_t estado_actual[WIDTH * HEIGHT];
    int16_t siguiente_estado[WIDTH * HEIGHT];
    uint32_t index;

    memset(estado_actual, 0, sizeof(estado_actual));
 8001c70:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001c74:	3b34      	subs	r3, #52	@ 0x34
 8001c76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f002 f901 	bl	8003e84 <memset>
    memset(siguiente_estado, -1, sizeof(siguiente_estado));
 8001c82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c86:	3b34      	subs	r3, #52	@ 0x34
 8001c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 f8f7 	bl	8003e84 <memset>

    for (uint8_t row = 0; row < HEIGHT; row++) {
 8001c96:	2300      	movs	r3, #0
 8001c98:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001c9c:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8001ca0:	7013      	strb	r3, [r2, #0]
 8001ca2:	e074      	b.n	8001d8e <LED_FallingSand+0x16e>
        for (uint8_t col = 0; col < WIDTH; col++) {
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001caa:	f102 023e 	add.w	r2, r2, #62	@ 0x3e
 8001cae:	7013      	strb	r3, [r2, #0]
 8001cb0:	e05b      	b.n	8001d6a <LED_FallingSand+0x14a>
            index = row * WIDTH + col;
 8001cb2:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001cb6:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	019a      	lsls	r2, r3, #6
 8001cbe:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001cc2:	f103 033e 	add.w	r3, r3, #62	@ 0x3e
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001cce:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001cd2:	6013      	str	r3, [r2, #0]
            estado_actual[index] = (frame[index].R || frame[index].G || frame[index].B) ? 1 : 0;
 8001cd4:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001cd8:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001ce8:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001cec:	4413      	add	r3, r2
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d11f      	bne.n	8001d34 <LED_FallingSand+0x114>
 8001cf4:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001cf8:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001d08:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10f      	bne.n	8001d34 <LED_FallingSand+0x114>
 8001d14:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001d18:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001d28:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	789b      	ldrb	r3, [r3, #2]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <LED_FallingSand+0x118>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <LED_FallingSand+0x11a>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001d40:	4619      	mov	r1, r3
 8001d42:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001d46:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	440b      	add	r3, r1
 8001d50:	f823 2c34 	strh.w	r2, [r3, #-52]
        for (uint8_t col = 0; col < WIDTH; col++) {
 8001d54:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001d58:	f103 033e 	add.w	r3, r3, #62	@ 0x3e
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001d64:	f102 023e 	add.w	r2, r2, #62	@ 0x3e
 8001d68:	7013      	strb	r3, [r2, #0]
 8001d6a:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001d6e:	f103 033e 	add.w	r3, r3, #62	@ 0x3e
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d76:	d99c      	bls.n	8001cb2 <LED_FallingSand+0x92>
    for (uint8_t row = 0; row < HEIGHT; row++) {
 8001d78:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001d7c:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001d88:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8001d8c:	7013      	strb	r3, [r2, #0]
 8001d8e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001d92:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d9a:	d983      	bls.n	8001ca4 <LED_FallingSand+0x84>
        }
    }
    // Inicializar las matrices de estado
    for (uint8_t row = 0; row < HEIGHT; row++) {
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001da2:	f102 023d 	add.w	r2, r2, #61	@ 0x3d
 8001da6:	7013      	strb	r3, [r2, #0]
 8001da8:	e08d      	b.n	8001ec6 <LED_FallingSand+0x2a6>
        for (uint8_t col = 0; col < WIDTH; col++) {
 8001daa:	2300      	movs	r3, #0
 8001dac:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001db0:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001db4:	7013      	strb	r3, [r2, #0]
 8001db6:	e074      	b.n	8001ea2 <LED_FallingSand+0x282>
            index = row * WIDTH + col;
 8001db8:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001dbc:	f103 033d 	add.w	r3, r3, #61	@ 0x3d
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	019a      	lsls	r2, r3, #6
 8001dc4:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001dc8:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001dd4:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001dd8:	6013      	str	r3, [r2, #0]
            if (frame[index].R == 0 && frame[index].G == 0 && frame[index].B == 0) {
 8001dda:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001dde:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001dee:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001df2:	4413      	add	r3, r2
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d12d      	bne.n	8001e56 <LED_FallingSand+0x236>
 8001dfa:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001dfe:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001e0e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001e12:	4413      	add	r3, r2
 8001e14:	785b      	ldrb	r3, [r3, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d11d      	bne.n	8001e56 <LED_FallingSand+0x236>
 8001e1a:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001e1e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4413      	add	r3, r2
 8001e2a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001e2e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001e32:	4413      	add	r3, r2
 8001e34:	789b      	ldrb	r3, [r3, #2]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <LED_FallingSand+0x236>
                estado_actual[index] = 0;  // No hay grano en esta posición
 8001e3a:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001e44:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f823 2c34 	strh.w	r2, [r3, #-52]
 8001e54:	e00c      	b.n	8001e70 <LED_FallingSand+0x250>
            } else {
                estado_actual[index] = 1;  // Hay un grano en esta posición
 8001e56:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001e60:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f823 2c34 	strh.w	r2, [r3, #-52]
            }
            siguiente_estado[index] = -1;  // Inicializamos con -1, indicando que el grano no se ha movido
 8001e70:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e74:	461a      	mov	r2, r3
 8001e76:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001e7a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e88:	f823 2c34 	strh.w	r2, [r3, #-52]
        for (uint8_t col = 0; col < WIDTH; col++) {
 8001e8c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001e90:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001e9c:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001ea0:	7013      	strb	r3, [r2, #0]
 8001ea2:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001ea6:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eae:	d983      	bls.n	8001db8 <LED_FallingSand+0x198>
    for (uint8_t row = 0; row < HEIGHT; row++) {
 8001eb0:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001eb4:	f103 033d 	add.w	r3, r3, #61	@ 0x3d
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001ec0:	f102 023d 	add.w	r2, r2, #61	@ 0x3d
 8001ec4:	7013      	strb	r3, [r2, #0]
 8001ec6:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001eca:	f103 033d 	add.w	r3, r3, #61	@ 0x3d
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ed2:	f67f af6a 	bls.w	8001daa <LED_FallingSand+0x18a>
        }
    }

    // Realiza la simulación
// Inicializar la última fila en `siguiente_estado`
for (int col = 0; col < WIDTH; col++) {
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001edc:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e036      	b.n	8001f52 <LED_FallingSand+0x332>
    int index = (HEIGHT - 1) * WIDTH + col;
 8001ee4:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001ee8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f503 637c 	add.w	r3, r3, #4032	@ 0xfc0
 8001ef2:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001ef6:	f102 020c 	add.w	r2, r2, #12
 8001efa:	6013      	str	r3, [r2, #0]
    if (estado_actual[index] == 1) {
 8001efc:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001f00:	461a      	mov	r2, r3
 8001f02:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f06:	f103 030c 	add.w	r3, r3, #12
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d111      	bne.n	8001f3c <LED_FallingSand+0x31c>
        siguiente_estado[index] = index; // Mantener el grano en la última fila
 8001f18:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f1c:	f103 030c 	add.w	r3, r3, #12
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f2e:	f103 030c 	add.w	r3, r3, #12
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	440b      	add	r3, r1
 8001f38:	f823 2c34 	strh.w	r2, [r3, #-52]
for (int col = 0; col < WIDTH; col++) {
 8001f3c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f40:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001f4c:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f56:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f5e:	ddc1      	ble.n	8001ee4 <LED_FallingSand+0x2c4>
    }
}

// Fase 2: Calcular el siguiente estado
for (int row = HEIGHT - 2; row >= 0; row--) {  // Recorrer de abajo hacia arriba
 8001f60:	233e      	movs	r3, #62	@ 0x3e
 8001f62:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001f66:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	e126      	b.n	80021bc <LED_FallingSand+0x59c>
    for (int col = 0; col < WIDTH; col++) {
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001f74:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e10c      	b.n	8002196 <LED_FallingSand+0x576>
        int current_index = row * WIDTH + col;
 8001f7c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f80:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	019b      	lsls	r3, r3, #6
 8001f88:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001f8c:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001f98:	f102 021c 	add.w	r2, r2, #28
 8001f9c:	6013      	str	r3, [r2, #0]

        // Si el grano de arena está presente en el estado_actual
        if (estado_actual[current_index] == 1) {
 8001f9e:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001fa8:	f103 031c 	add.w	r3, r3, #28
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	f040 80e2 	bne.w	8002180 <LED_FallingSand+0x560>
            // Verificar si el espacio de abajo está libre
            int abajo_index = (row + 1) * WIDTH + col;
 8001fbc:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001fc0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	019b      	lsls	r3, r3, #6
 8001fca:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001fce:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001fda:	f102 0218 	add.w	r2, r2, #24
 8001fde:	6013      	str	r3, [r2, #0]
            if (estado_actual[abajo_index] == 0) {
 8001fe0:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001fea:	f103 0318 	add.w	r3, r3, #24
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d11f      	bne.n	800203c <LED_FallingSand+0x41c>
                // Mover el grano de arena hacia abajo
                siguiente_estado[abajo_index] = current_index;
 8001ffc:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002000:	f103 031c 	add.w	r3, r3, #28
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b21a      	sxth	r2, r3
 8002008:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800200c:	4619      	mov	r1, r3
 800200e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002012:	f103 0318 	add.w	r3, r3, #24
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	440b      	add	r3, r1
 800201c:	f823 2c34 	strh.w	r2, [r3, #-52]
                estado_actual[current_index] = 0;
 8002020:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8002024:	461a      	mov	r2, r3
 8002026:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800202a:	f103 031c 	add.w	r3, r3, #28
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	2200      	movs	r2, #0
 8002036:	f823 2c34 	strh.w	r2, [r3, #-52]
 800203a:	e0a1      	b.n	8002180 <LED_FallingSand+0x560>
            } else {
                // Intentar mover hacia abajo a la izquierda o derecha
                int abajoIzquierda_index = (row + 1) * WIDTH + (col - 1);
 800203c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002040:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	019a      	lsls	r2, r3, #6
 800204a:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800204e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3b01      	subs	r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 800205c:	f102 0214 	add.w	r2, r2, #20
 8002060:	6013      	str	r3, [r2, #0]
                if (col > 0 && estado_actual[abajoIzquierda_index] == 0) {
 8002062:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002066:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	dd2d      	ble.n	80020cc <LED_FallingSand+0x4ac>
 8002070:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8002074:	461a      	mov	r2, r3
 8002076:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800207a:	f103 0314 	add.w	r3, r3, #20
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d11f      	bne.n	80020cc <LED_FallingSand+0x4ac>
                    siguiente_estado[abajoIzquierda_index] = current_index;
 800208c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002090:	f103 031c 	add.w	r3, r3, #28
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	b21a      	sxth	r2, r3
 8002098:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800209c:	4619      	mov	r1, r3
 800209e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80020a2:	f103 0314 	add.w	r3, r3, #20
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	440b      	add	r3, r1
 80020ac:	f823 2c34 	strh.w	r2, [r3, #-52]
                    estado_actual[current_index] = 0;
 80020b0:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 80020b4:	461a      	mov	r2, r3
 80020b6:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80020ba:	f103 031c 	add.w	r3, r3, #28
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	2200      	movs	r2, #0
 80020c6:	f823 2c34 	strh.w	r2, [r3, #-52]
 80020ca:	e059      	b.n	8002180 <LED_FallingSand+0x560>
                } else {
                    int abajoDerecha_index = (row + 1) * WIDTH + (col + 1);
 80020cc:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80020d0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	019a      	lsls	r2, r3, #6
 80020da:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80020de:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 80020ec:	f102 0210 	add.w	r2, r2, #16
 80020f0:	6013      	str	r3, [r2, #0]
                    if (col < WIDTH - 1 && estado_actual[abajoDerecha_index] == 0) {
 80020f2:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80020f6:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80020fe:	dc2d      	bgt.n	800215c <LED_FallingSand+0x53c>
 8002100:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8002104:	461a      	mov	r2, r3
 8002106:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800210a:	f103 0310 	add.w	r3, r3, #16
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d11f      	bne.n	800215c <LED_FallingSand+0x53c>
                        siguiente_estado[abajoDerecha_index] = current_index;
 800211c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002120:	f103 031c 	add.w	r3, r3, #28
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b21a      	sxth	r2, r3
 8002128:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800212c:	4619      	mov	r1, r3
 800212e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002132:	f103 0310 	add.w	r3, r3, #16
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	440b      	add	r3, r1
 800213c:	f823 2c34 	strh.w	r2, [r3, #-52]
                        estado_actual[current_index] = 0;
 8002140:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8002144:	461a      	mov	r2, r3
 8002146:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800214a:	f103 031c 	add.w	r3, r3, #28
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	2200      	movs	r2, #0
 8002156:	f823 2c34 	strh.w	r2, [r3, #-52]
 800215a:	e011      	b.n	8002180 <LED_FallingSand+0x560>
                    } else {
                        // Si no puede moverse, se queda en su posición actual
                        siguiente_estado[current_index] = current_index;
 800215c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002160:	f103 031c 	add.w	r3, r3, #28
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	b21a      	sxth	r2, r3
 8002168:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800216c:	4619      	mov	r1, r3
 800216e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002172:	f103 031c 	add.w	r3, r3, #28
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	440b      	add	r3, r1
 800217c:	f823 2c34 	strh.w	r2, [r3, #-52]
    for (int col = 0; col < WIDTH; col++) {
 8002180:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002184:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3301      	adds	r3, #1
 800218c:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8002190:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800219a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80021a2:	f77f aeeb 	ble.w	8001f7c <LED_FallingSand+0x35c>
for (int row = HEIGHT - 2; row >= 0; row--) {  // Recorrer de abajo hacia arriba
 80021a6:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80021aa:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 80021b6:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80021c0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f6bf aed1 	bge.w	8001f6e <LED_FallingSand+0x34e>
        }
    }
}

    // Ahora, calculamos el frame final con la información de siguiente_estado
    for (uint8_t row = 0; row < HEIGHT; row++) {
 80021cc:	2300      	movs	r3, #0
 80021ce:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 80021d2:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 80021d6:	7013      	strb	r3, [r2, #0]
 80021d8:	e088      	b.n	80022ec <LED_FallingSand+0x6cc>
        for (uint8_t col = 0; col < WIDTH; col++) {
 80021da:	2300      	movs	r3, #0
 80021dc:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 80021e0:	f102 022e 	add.w	r2, r2, #46	@ 0x2e
 80021e4:	7013      	strb	r3, [r2, #0]
 80021e6:	e06f      	b.n	80022c8 <LED_FallingSand+0x6a8>
            index = row * WIDTH + col;
 80021e8:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80021ec:	f103 032f 	add.w	r3, r3, #47	@ 0x2f
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	019a      	lsls	r2, r3, #6
 80021f4:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80021f8:	f103 032e 	add.w	r3, r3, #46	@ 0x2e
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8002204:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002208:	6013      	str	r3, [r2, #0]
            if (siguiente_estado[index] != -1) {
 800220a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800220e:	461a      	mov	r2, r3
 8002210:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002214:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8002222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002226:	d031      	beq.n	800228c <LED_FallingSand+0x66c>
                uint32_t origin_index = siguiente_estado[index];
 8002228:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800222c:	461a      	mov	r2, r3
 800222e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002232:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8002240:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8002244:	f102 0220 	add.w	r2, r2, #32
 8002248:	6013      	str	r3, [r2, #0]
                frame[index] = frame_auxiliar[origin_index];  // El grano se mueve a la nueva posición
 800224a:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800224e:	f103 0320 	add.w	r3, r3, #32
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 800225e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	18d1      	adds	r1, r2, r3
 8002266:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800226a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800227a:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800227e:	4413      	add	r3, r2
 8002280:	460a      	mov	r2, r1
 8002282:	8811      	ldrh	r1, [r2, #0]
 8002284:	7892      	ldrb	r2, [r2, #2]
 8002286:	8019      	strh	r1, [r3, #0]
 8002288:	709a      	strb	r2, [r3, #2]
 800228a:	e012      	b.n	80022b2 <LED_FallingSand+0x692>
            } else {
                frame[index] = (RGB_t){0x00, 0x00, 0x00};  // Si no se mueve, queda vacío
 800228c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002290:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80022a0:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80022a4:	4413      	add	r3, r2
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	2200      	movs	r2, #0
 80022ac:	705a      	strb	r2, [r3, #1]
 80022ae:	2200      	movs	r2, #0
 80022b0:	709a      	strb	r2, [r3, #2]
        for (uint8_t col = 0; col < WIDTH; col++) {
 80022b2:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80022b6:	f103 032e 	add.w	r3, r3, #46	@ 0x2e
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 80022c2:	f102 022e 	add.w	r2, r2, #46	@ 0x2e
 80022c6:	7013      	strb	r3, [r2, #0]
 80022c8:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80022cc:	f103 032e 	add.w	r3, r3, #46	@ 0x2e
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80022d4:	d988      	bls.n	80021e8 <LED_FallingSand+0x5c8>
    for (uint8_t row = 0; row < HEIGHT; row++) {
 80022d6:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80022da:	f103 032f 	add.w	r3, r3, #47	@ 0x2f
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 80022e6:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 80022ea:	7013      	strb	r3, [r2, #0]
 80022ec:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80022f0:	f103 032f 	add.w	r3, r3, #47	@ 0x2f
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80022f8:	f67f af6f 	bls.w	80021da <LED_FallingSand+0x5ba>
            }
        }
    }
    free(frame_auxiliar);
 80022fc:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002300:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	f001 fd07 	bl	8003d18 <free>
 800230a:	e000      	b.n	800230e <LED_FallingSand+0x6ee>
        return;
 800230c:	bf00      	nop
}
 800230e:	f507 4780 	add.w	r7, r7, #16384	@ 0x4000
 8002312:	3740      	adds	r7, #64	@ 0x40
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	@ 0x28
 800231c:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
 	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = BOTON_Pin;
 800232c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002330:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002332:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002336:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(BOTON_GPIO_Port, &GPIO_InitStruct);
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	4619      	mov	r1, r3
 8002340:	486e      	ldr	r0, [pc, #440]	@ (80024fc <main+0x1e4>)
 8002342:	f001 f94d 	bl	80035e0 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	2028      	movs	r0, #40	@ 0x28
 800234c:	f001 f91d 	bl	800358a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002350:	2028      	movs	r0, #40	@ 0x28
 8002352:	f001 f936 	bl	80035c2 <HAL_NVIC_EnableIRQ>
	init();
 8002356:	f7fe fd41 	bl	8000ddc <init>
	MX_TIM6_Init();
 800235a:	f000 fa27 	bl	80027ac <MX_TIM6_Init>
	MX_ADC2_Init();
 800235e:	f000 f9d3 	bl	8002708 <MX_ADC2_Init>

  /* MCU Configuration--------------------------------------------------------*/


  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8002362:	4867      	ldr	r0, [pc, #412]	@ (8002500 <main+0x1e8>)
 8002364:	f001 fb38 	bl	80039d8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      start_time = HAL_GetTick();
 8002368:	f000 fc9e 	bl	8002ca8 <HAL_GetTick>
 800236c:	4603      	mov	r3, r0
 800236e:	4a65      	ldr	r2, [pc, #404]	@ (8002504 <main+0x1ec>)
 8002370:	6013      	str	r3, [r2, #0]
      while(busyFlag); // Bloquea el CPU mientras el DMA labura
 8002372:	bf00      	nop
 8002374:	4b64      	ldr	r3, [pc, #400]	@ (8002508 <main+0x1f0>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1fa      	bne.n	8002374 <main+0x5c>
      busyFlag = 1;
 800237e:	4b62      	ldr	r3, [pc, #392]	@ (8002508 <main+0x1f0>)
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
      current_buffer = DMA2_Stream2->CR | DMA_SxCR_CT;
 8002384:	4b61      	ldr	r3, [pc, #388]	@ (800250c <main+0x1f4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800238c:	4a60      	ldr	r2, [pc, #384]	@ (8002510 <main+0x1f8>)
 800238e:	6013      	str	r3, [r2, #0]
      nextBuffer = current_buffer ? buffer2 : buffer1;
 8002390:	4b5f      	ldr	r3, [pc, #380]	@ (8002510 <main+0x1f8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <main+0x84>
 8002398:	4b5e      	ldr	r3, [pc, #376]	@ (8002514 <main+0x1fc>)
 800239a:	e000      	b.n	800239e <main+0x86>
 800239c:	4b5e      	ldr	r3, [pc, #376]	@ (8002518 <main+0x200>)
 800239e:	4a5f      	ldr	r2, [pc, #380]	@ (800251c <main+0x204>)
 80023a0:	6013      	str	r3, [r2, #0]
      while(busyFlag);
 80023a2:	bf00      	nop
 80023a4:	4b58      	ldr	r3, [pc, #352]	@ (8002508 <main+0x1f0>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1fa      	bne.n	80023a4 <main+0x8c>
      busyFlag = 1;
 80023ae:	4b56      	ldr	r3, [pc, #344]	@ (8002508 <main+0x1f0>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
      //programa_actual = (frame_count/frames_per_program)%total_programs;
      switch(programa_actual){
 80023b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002520 <main+0x208>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b07      	cmp	r3, #7
 80023ba:	f200 8182 	bhi.w	80026c2 <main+0x3aa>
 80023be:	a201      	add	r2, pc, #4	@ (adr r2, 80023c4 <main+0xac>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	080023e5 	.word	0x080023e5
 80023c8:	080023ff 	.word	0x080023ff
 80023cc:	08002413 	.word	0x08002413
 80023d0:	08002421 	.word	0x08002421
 80023d4:	0800242f 	.word	0x0800242f
 80023d8:	080024b3 	.word	0x080024b3
 80023dc:	08002561 	.word	0x08002561
 80023e0:	08002675 	.word	0x08002675
      	case wave:
      		bandera_debugger=1;
 80023e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002524 <main+0x20c>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]
      		LED_waveEffect(frame);
 80023ea:	484f      	ldr	r0, [pc, #316]	@ (8002528 <main+0x210>)
 80023ec:	f7fe feac 	bl	8001148 <LED_waveEffect>
              // LED_rectangle(frame, red , 0, 10, 0, 40 );
      		LED_fillBuffer(frame, nextBuffer);
 80023f0:	4b4a      	ldr	r3, [pc, #296]	@ (800251c <main+0x204>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	484c      	ldr	r0, [pc, #304]	@ (8002528 <main+0x210>)
 80023f8:	f7fe fdd6 	bl	8000fa8 <LED_fillBuffer>
      		break;
 80023fc:	e161      	b.n	80026c2 <main+0x3aa>
          case plasma:
      		LED_plasmaEffect(frame);
 80023fe:	484a      	ldr	r0, [pc, #296]	@ (8002528 <main+0x210>)
 8002400:	f7ff f802 	bl	8001408 <LED_plasmaEffect>
              // LED_rectangle(frame, red , 20, 40, 20, 40 );
              LED_fillBuffer(frame, nextBuffer);
 8002404:	4b45      	ldr	r3, [pc, #276]	@ (800251c <main+0x204>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	4847      	ldr	r0, [pc, #284]	@ (8002528 <main+0x210>)
 800240c:	f7fe fdcc 	bl	8000fa8 <LED_fillBuffer>
      		break;
 8002410:	e157      	b.n	80026c2 <main+0x3aa>
      	case img1:
      		LED_fillBuffer(frame_img2, nextBuffer);
 8002412:	4b42      	ldr	r3, [pc, #264]	@ (800251c <main+0x204>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4619      	mov	r1, r3
 8002418:	4844      	ldr	r0, [pc, #272]	@ (800252c <main+0x214>)
 800241a:	f7fe fdc5 	bl	8000fa8 <LED_fillBuffer>
      		break;
 800241e:	e150      	b.n	80026c2 <main+0x3aa>
      	case img2:
      		LED_fillBuffer(frame_img1, nextBuffer);
 8002420:	4b3e      	ldr	r3, [pc, #248]	@ (800251c <main+0x204>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	4842      	ldr	r0, [pc, #264]	@ (8002530 <main+0x218>)
 8002428:	f7fe fdbe 	bl	8000fa8 <LED_fillBuffer>
      		break;
 800242c:	e149      	b.n	80026c2 <main+0x3aa>
          case adc:
				HAL_ADC_Start(&hadc2); // Dispara la lectura del ADC.
 800242e:	4841      	ldr	r0, [pc, #260]	@ (8002534 <main+0x21c>)
 8002430:	f000 fc8a 	bl	8002d48 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc2,10); // Bloquea hasta fin de conversión.
 8002434:	210a      	movs	r1, #10
 8002436:	483f      	ldr	r0, [pc, #252]	@ (8002534 <main+0x21c>)
 8002438:	f000 fd58 	bl	8002eec <HAL_ADC_PollForConversion>
				value_adc=HAL_ADC_GetValue(&hadc2); // Lee el ADC.
 800243c:	483d      	ldr	r0, [pc, #244]	@ (8002534 <main+0x21c>)
 800243e:	f000 fde0 	bl	8003002 <HAL_ADC_GetValue>
 8002442:	4603      	mov	r3, r0
 8002444:	4a3c      	ldr	r2, [pc, #240]	@ (8002538 <main+0x220>)
 8002446:	6013      	str	r3, [r2, #0]
				bandera_adc = 1;
 8002448:	4b3c      	ldr	r3, [pc, #240]	@ (800253c <main+0x224>)
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
              // Leo adc
        	  if(bandera_adc){
 800244e:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <main+0x224>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8133 	beq.w	80026be <main+0x3a6>
        		  LED_analog_bar(frame, white, black, mapf((float)(value_adc), valor_min_adc, valor_max_adc, 0.0 ,1.0));
 8002458:	4b37      	ldr	r3, [pc, #220]	@ (8002538 <main+0x220>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002464:	4b36      	ldr	r3, [pc, #216]	@ (8002540 <main+0x228>)
 8002466:	ed93 7a00 	vldr	s14, [r3]
 800246a:	4b36      	ldr	r3, [pc, #216]	@ (8002544 <main+0x22c>)
 800246c:	edd3 6a00 	vldr	s13, [r3]
 8002470:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8002474:	eddf 1a34 	vldr	s3, [pc, #208]	@ 8002548 <main+0x230>
 8002478:	eeb0 1a66 	vmov.f32	s2, s13
 800247c:	eef0 0a47 	vmov.f32	s1, s14
 8002480:	eeb0 0a67 	vmov.f32	s0, s15
 8002484:	f7fe fd3e 	bl	8000f04 <mapf>
 8002488:	eef0 7a40 	vmov.f32	s15, s0
 800248c:	4a2f      	ldr	r2, [pc, #188]	@ (800254c <main+0x234>)
 800248e:	4b30      	ldr	r3, [pc, #192]	@ (8002550 <main+0x238>)
 8002490:	eeb0 0a67 	vmov.f32	s0, s15
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	6819      	ldr	r1, [r3, #0]
 8002498:	4823      	ldr	r0, [pc, #140]	@ (8002528 <main+0x210>)
 800249a:	f7ff fa0f 	bl	80018bc <LED_analog_bar>
        		  //LED_analog_bar(frame, white, black, 0.7);
        		  LED_fillBuffer(frame, nextBuffer);
 800249e:	4b1f      	ldr	r3, [pc, #124]	@ (800251c <main+0x204>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4619      	mov	r1, r3
 80024a4:	4820      	ldr	r0, [pc, #128]	@ (8002528 <main+0x210>)
 80024a6:	f7fe fd7f 	bl	8000fa8 <LED_fillBuffer>
        		  bandera_adc=0;
 80024aa:	4b24      	ldr	r3, [pc, #144]	@ (800253c <main+0x224>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
        	  }
              break;
 80024b0:	e105      	b.n	80026be <main+0x3a6>
          case text:
              LED_rectangle(frame, black, 0, HEIGHT, 0 ,WIDTH);
 80024b2:	4926      	ldr	r1, [pc, #152]	@ (800254c <main+0x234>)
 80024b4:	2340      	movs	r3, #64	@ 0x40
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	2300      	movs	r3, #0
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2340      	movs	r3, #64	@ 0x40
 80024be:	2200      	movs	r2, #0
 80024c0:	6809      	ldr	r1, [r1, #0]
 80024c2:	4819      	ldr	r0, [pc, #100]	@ (8002528 <main+0x210>)
 80024c4:	f7ff f99c 	bl	8001800 <LED_rectangle>
              LED_Text(frame, font, "abcdefghijklmnopkrstuvwxyz", 1,1 , red, 1);
 80024c8:	2301      	movs	r3, #1
 80024ca:	9302      	str	r3, [sp, #8]
 80024cc:	4a21      	ldr	r2, [pc, #132]	@ (8002554 <main+0x23c>)
 80024ce:	ab01      	add	r3, sp, #4
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	4611      	mov	r1, r2
 80024d4:	8019      	strh	r1, [r3, #0]
 80024d6:	3302      	adds	r3, #2
 80024d8:	0c12      	lsrs	r2, r2, #16
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	2301      	movs	r3, #1
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2301      	movs	r3, #1
 80024e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002558 <main+0x240>)
 80024e4:	491d      	ldr	r1, [pc, #116]	@ (800255c <main+0x244>)
 80024e6:	4810      	ldr	r0, [pc, #64]	@ (8002528 <main+0x210>)
 80024e8:	f7ff fac5 	bl	8001a76 <LED_Text>
              LED_fillBuffer(frame, nextBuffer);
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <main+0x204>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	480d      	ldr	r0, [pc, #52]	@ (8002528 <main+0x210>)
 80024f4:	f7fe fd58 	bl	8000fa8 <LED_fillBuffer>
              break;
 80024f8:	e0e3      	b.n	80026c2 <main+0x3aa>
 80024fa:	bf00      	nop
 80024fc:	40020800 	.word	0x40020800
 8002500:	200114f4 	.word	0x200114f4
 8002504:	20011558 	.word	0x20011558
 8002508:	2001154d 	.word	0x2001154d
 800250c:	40026440 	.word	0x40026440
 8002510:	20011554 	.word	0x20011554
 8002514:	2000d49c 	.word	0x2000d49c
 8002518:	2000949c 	.word	0x2000949c
 800251c:	20011550 	.word	0x20011550
 8002520:	20006425 	.word	0x20006425
 8002524:	20006424 	.word	0x20006424
 8002528:	2000649c 	.word	0x2000649c
 800252c:	20000000 	.word	0x20000000
 8002530:	20003000 	.word	0x20003000
 8002534:	200114ac 	.word	0x200114ac
 8002538:	20011540 	.word	0x20011540
 800253c:	2001154c 	.word	0x2001154c
 8002540:	2001153c 	.word	0x2001153c
 8002544:	20006420 	.word	0x20006420
 8002548:	00000000 	.word	0x00000000
 800254c:	200114a8 	.word	0x200114a8
 8002550:	2000600c 	.word	0x2000600c
 8002554:	20006000 	.word	0x20006000
 8002558:	08004bc0 	.word	0x08004bc0
 800255c:	200063b8 	.word	0x200063b8
          case slidding_text:
              LED_rectangle(frame, black, 0, HEIGHT, 0 ,WIDTH);
 8002560:	495d      	ldr	r1, [pc, #372]	@ (80026d8 <main+0x3c0>)
 8002562:	2340      	movs	r3, #64	@ 0x40
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	2300      	movs	r3, #0
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2340      	movs	r3, #64	@ 0x40
 800256c:	2200      	movs	r2, #0
 800256e:	6809      	ldr	r1, [r1, #0]
 8002570:	485a      	ldr	r0, [pc, #360]	@ (80026dc <main+0x3c4>)
 8002572:	f7ff f945 	bl	8001800 <LED_rectangle>
              LED_SliddingText(frame, font, "muchas", 5, 5, red, 0, 1);
 8002576:	2301      	movs	r3, #1
 8002578:	9303      	str	r3, [sp, #12]
 800257a:	2300      	movs	r3, #0
 800257c:	9302      	str	r3, [sp, #8]
 800257e:	4a58      	ldr	r2, [pc, #352]	@ (80026e0 <main+0x3c8>)
 8002580:	ab01      	add	r3, sp, #4
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	4611      	mov	r1, r2
 8002586:	8019      	strh	r1, [r3, #0]
 8002588:	3302      	adds	r3, #2
 800258a:	0c12      	lsrs	r2, r2, #16
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	2305      	movs	r3, #5
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2305      	movs	r3, #5
 8002594:	4a53      	ldr	r2, [pc, #332]	@ (80026e4 <main+0x3cc>)
 8002596:	4954      	ldr	r1, [pc, #336]	@ (80026e8 <main+0x3d0>)
 8002598:	4850      	ldr	r0, [pc, #320]	@ (80026dc <main+0x3c4>)
 800259a:	f7ff fac3 	bl	8001b24 <LED_SliddingText>
              LED_SliddingText(frame, font, "gracias", 15, 15, red, 0, 1);
 800259e:	2301      	movs	r3, #1
 80025a0:	9303      	str	r3, [sp, #12]
 80025a2:	2300      	movs	r3, #0
 80025a4:	9302      	str	r3, [sp, #8]
 80025a6:	4a4e      	ldr	r2, [pc, #312]	@ (80026e0 <main+0x3c8>)
 80025a8:	ab01      	add	r3, sp, #4
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	4611      	mov	r1, r2
 80025ae:	8019      	strh	r1, [r3, #0]
 80025b0:	3302      	adds	r3, #2
 80025b2:	0c12      	lsrs	r2, r2, #16
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	230f      	movs	r3, #15
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	230f      	movs	r3, #15
 80025bc:	4a4b      	ldr	r2, [pc, #300]	@ (80026ec <main+0x3d4>)
 80025be:	494a      	ldr	r1, [pc, #296]	@ (80026e8 <main+0x3d0>)
 80025c0:	4846      	ldr	r0, [pc, #280]	@ (80026dc <main+0x3c4>)
 80025c2:	f7ff faaf 	bl	8001b24 <LED_SliddingText>
              LED_SliddingText(frame, font, "muchas", 5, 25, green, 0, -1);
 80025c6:	23ff      	movs	r3, #255	@ 0xff
 80025c8:	9303      	str	r3, [sp, #12]
 80025ca:	2300      	movs	r3, #0
 80025cc:	9302      	str	r3, [sp, #8]
 80025ce:	4a48      	ldr	r2, [pc, #288]	@ (80026f0 <main+0x3d8>)
 80025d0:	ab01      	add	r3, sp, #4
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	4611      	mov	r1, r2
 80025d6:	8019      	strh	r1, [r3, #0]
 80025d8:	3302      	adds	r3, #2
 80025da:	0c12      	lsrs	r2, r2, #16
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	2319      	movs	r3, #25
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2305      	movs	r3, #5
 80025e4:	4a3f      	ldr	r2, [pc, #252]	@ (80026e4 <main+0x3cc>)
 80025e6:	4940      	ldr	r1, [pc, #256]	@ (80026e8 <main+0x3d0>)
 80025e8:	483c      	ldr	r0, [pc, #240]	@ (80026dc <main+0x3c4>)
 80025ea:	f7ff fa9b 	bl	8001b24 <LED_SliddingText>
              LED_SliddingText(frame, font, "gracias", 15, 35, green, 0, -1);
 80025ee:	23ff      	movs	r3, #255	@ 0xff
 80025f0:	9303      	str	r3, [sp, #12]
 80025f2:	2300      	movs	r3, #0
 80025f4:	9302      	str	r3, [sp, #8]
 80025f6:	4a3e      	ldr	r2, [pc, #248]	@ (80026f0 <main+0x3d8>)
 80025f8:	ab01      	add	r3, sp, #4
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	4611      	mov	r1, r2
 80025fe:	8019      	strh	r1, [r3, #0]
 8002600:	3302      	adds	r3, #2
 8002602:	0c12      	lsrs	r2, r2, #16
 8002604:	701a      	strb	r2, [r3, #0]
 8002606:	2323      	movs	r3, #35	@ 0x23
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	230f      	movs	r3, #15
 800260c:	4a37      	ldr	r2, [pc, #220]	@ (80026ec <main+0x3d4>)
 800260e:	4936      	ldr	r1, [pc, #216]	@ (80026e8 <main+0x3d0>)
 8002610:	4832      	ldr	r0, [pc, #200]	@ (80026dc <main+0x3c4>)
 8002612:	f7ff fa87 	bl	8001b24 <LED_SliddingText>
              LED_SliddingText(frame, font, "muchas", 5, 45, blue, 0, 1);
 8002616:	2301      	movs	r3, #1
 8002618:	9303      	str	r3, [sp, #12]
 800261a:	2300      	movs	r3, #0
 800261c:	9302      	str	r3, [sp, #8]
 800261e:	4a35      	ldr	r2, [pc, #212]	@ (80026f4 <main+0x3dc>)
 8002620:	ab01      	add	r3, sp, #4
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	4611      	mov	r1, r2
 8002626:	8019      	strh	r1, [r3, #0]
 8002628:	3302      	adds	r3, #2
 800262a:	0c12      	lsrs	r2, r2, #16
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	232d      	movs	r3, #45	@ 0x2d
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2305      	movs	r3, #5
 8002634:	4a2b      	ldr	r2, [pc, #172]	@ (80026e4 <main+0x3cc>)
 8002636:	492c      	ldr	r1, [pc, #176]	@ (80026e8 <main+0x3d0>)
 8002638:	4828      	ldr	r0, [pc, #160]	@ (80026dc <main+0x3c4>)
 800263a:	f7ff fa73 	bl	8001b24 <LED_SliddingText>
              LED_SliddingText(frame, font, "gracias", 15, 55, blue, 0, 1);
 800263e:	2301      	movs	r3, #1
 8002640:	9303      	str	r3, [sp, #12]
 8002642:	2300      	movs	r3, #0
 8002644:	9302      	str	r3, [sp, #8]
 8002646:	4a2b      	ldr	r2, [pc, #172]	@ (80026f4 <main+0x3dc>)
 8002648:	ab01      	add	r3, sp, #4
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	4611      	mov	r1, r2
 800264e:	8019      	strh	r1, [r3, #0]
 8002650:	3302      	adds	r3, #2
 8002652:	0c12      	lsrs	r2, r2, #16
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	2337      	movs	r3, #55	@ 0x37
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	230f      	movs	r3, #15
 800265c:	4a23      	ldr	r2, [pc, #140]	@ (80026ec <main+0x3d4>)
 800265e:	4922      	ldr	r1, [pc, #136]	@ (80026e8 <main+0x3d0>)
 8002660:	481e      	ldr	r0, [pc, #120]	@ (80026dc <main+0x3c4>)
 8002662:	f7ff fa5f 	bl	8001b24 <LED_SliddingText>
              LED_fillBuffer(frame, nextBuffer);
 8002666:	4b24      	ldr	r3, [pc, #144]	@ (80026f8 <main+0x3e0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4619      	mov	r1, r3
 800266c:	481b      	ldr	r0, [pc, #108]	@ (80026dc <main+0x3c4>)
 800266e:	f7fe fc9b 	bl	8000fa8 <LED_fillBuffer>
              break;
 8002672:	e026      	b.n	80026c2 <main+0x3aa>
          case falling_sand:
              if(bandera_debugger){
 8002674:	4b21      	ldr	r3, [pc, #132]	@ (80026fc <main+0x3e4>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <main+0x37c>
            	  memcpy(frame, frame_img2, WIDTH * HEIGHT * sizeof(RGB_t));
 800267c:	4a17      	ldr	r2, [pc, #92]	@ (80026dc <main+0x3c4>)
 800267e:	4b20      	ldr	r3, [pc, #128]	@ (8002700 <main+0x3e8>)
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002688:	461a      	mov	r2, r3
 800268a:	f001 fc3f 	bl	8003f0c <memcpy>
                  bandera_debugger=0;
 800268e:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <main+0x3e4>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
              }
              LED_rectangle(frame, green,  3 , 3 , 60 ,60);
 8002694:	4916      	ldr	r1, [pc, #88]	@ (80026f0 <main+0x3d8>)
 8002696:	233c      	movs	r3, #60	@ 0x3c
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	233c      	movs	r3, #60	@ 0x3c
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2303      	movs	r3, #3
 80026a0:	2203      	movs	r2, #3
 80026a2:	6809      	ldr	r1, [r1, #0]
 80026a4:	480d      	ldr	r0, [pc, #52]	@ (80026dc <main+0x3c4>)
 80026a6:	f7ff f8ab 	bl	8001800 <LED_rectangle>
              LED_FallingSand(frame);
 80026aa:	480c      	ldr	r0, [pc, #48]	@ (80026dc <main+0x3c4>)
 80026ac:	f7ff fab8 	bl	8001c20 <LED_FallingSand>
              LED_fillBuffer(frame, nextBuffer);
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <main+0x3e0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	4809      	ldr	r0, [pc, #36]	@ (80026dc <main+0x3c4>)
 80026b8:	f7fe fc76 	bl	8000fa8 <LED_fillBuffer>
          break;
 80026bc:	e001      	b.n	80026c2 <main+0x3aa>
              break;
 80026be:	bf00      	nop
 80026c0:	e7ff      	b.n	80026c2 <main+0x3aa>
      }

      while(HAL_GetTick() - start_time < 30); // Capea f=1/30ms=33,33Hz
 80026c2:	bf00      	nop
 80026c4:	f000 faf0 	bl	8002ca8 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <main+0x3ec>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b1d      	cmp	r3, #29
 80026d2:	d9f7      	bls.n	80026c4 <main+0x3ac>
      start_time = HAL_GetTick();
 80026d4:	e648      	b.n	8002368 <main+0x50>
 80026d6:	bf00      	nop
 80026d8:	200114a8 	.word	0x200114a8
 80026dc:	2000649c 	.word	0x2000649c
 80026e0:	20006000 	.word	0x20006000
 80026e4:	08004bdc 	.word	0x08004bdc
 80026e8:	200063b8 	.word	0x200063b8
 80026ec:	08004be4 	.word	0x08004be4
 80026f0:	20006004 	.word	0x20006004
 80026f4:	20006008 	.word	0x20006008
 80026f8:	20011550 	.word	0x20011550
 80026fc:	20006424 	.word	0x20006424
 8002700:	20000000 	.word	0x20000000
 8002704:	20011558 	.word	0x20011558

08002708 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800270e:	463b      	mov	r3, r7
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800271a:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <MX_ADC2_Init+0x98>)
 800271c:	4a21      	ldr	r2, [pc, #132]	@ (80027a4 <MX_ADC2_Init+0x9c>)
 800271e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002720:	4b1f      	ldr	r3, [pc, #124]	@ (80027a0 <MX_ADC2_Init+0x98>)
 8002722:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002726:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002728:	4b1d      	ldr	r3, [pc, #116]	@ (80027a0 <MX_ADC2_Init+0x98>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800272e:	4b1c      	ldr	r3, [pc, #112]	@ (80027a0 <MX_ADC2_Init+0x98>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002734:	4b1a      	ldr	r3, [pc, #104]	@ (80027a0 <MX_ADC2_Init+0x98>)
 8002736:	2200      	movs	r2, #0
 8002738:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800273a:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <MX_ADC2_Init+0x98>)
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002742:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <MX_ADC2_Init+0x98>)
 8002744:	2200      	movs	r2, #0
 8002746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002748:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <MX_ADC2_Init+0x98>)
 800274a:	4a17      	ldr	r2, [pc, #92]	@ (80027a8 <MX_ADC2_Init+0xa0>)
 800274c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800274e:	4b14      	ldr	r3, [pc, #80]	@ (80027a0 <MX_ADC2_Init+0x98>)
 8002750:	2200      	movs	r2, #0
 8002752:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002754:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <MX_ADC2_Init+0x98>)
 8002756:	2201      	movs	r2, #1
 8002758:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800275a:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <MX_ADC2_Init+0x98>)
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002762:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <MX_ADC2_Init+0x98>)
 8002764:	2201      	movs	r2, #1
 8002766:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002768:	480d      	ldr	r0, [pc, #52]	@ (80027a0 <MX_ADC2_Init+0x98>)
 800276a:	f000 faa9 	bl	8002cc0 <HAL_ADC_Init>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002774:	f000 f86e 	bl	8002854 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002778:	2304      	movs	r3, #4
 800277a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800277c:	2301      	movs	r3, #1
 800277e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002784:	463b      	mov	r3, r7
 8002786:	4619      	mov	r1, r3
 8002788:	4805      	ldr	r0, [pc, #20]	@ (80027a0 <MX_ADC2_Init+0x98>)
 800278a:	f000 fc47 	bl	800301c <HAL_ADC_ConfigChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002794:	f000 f85e 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200114ac 	.word	0x200114ac
 80027a4:	40012100 	.word	0x40012100
 80027a8:	0f000001 	.word	0x0f000001

080027ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b2:	463b      	mov	r3, r7
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <MX_TIM6_Init+0x64>)
 80027bc:	4a15      	ldr	r2, [pc, #84]	@ (8002814 <MX_TIM6_Init+0x68>)
 80027be:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 80027c0:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <MX_TIM6_Init+0x64>)
 80027c2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80027c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c8:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <MX_TIM6_Init+0x64>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80027ce:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <MX_TIM6_Init+0x64>)
 80027d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <MX_TIM6_Init+0x64>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027dc:	480c      	ldr	r0, [pc, #48]	@ (8002810 <MX_TIM6_Init+0x64>)
 80027de:	f001 f8ab 	bl	8003938 <HAL_TIM_Base_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80027e8:	f000 f834 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ec:	2300      	movs	r3, #0
 80027ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027f4:	463b      	mov	r3, r7
 80027f6:	4619      	mov	r1, r3
 80027f8:	4805      	ldr	r0, [pc, #20]	@ (8002810 <MX_TIM6_Init+0x64>)
 80027fa:	f001 fa09 	bl	8003c10 <HAL_TIMEx_MasterConfigSynchronization>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002804:	f000 f826 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200114f4 	.word	0x200114f4
 8002814:	40001000 	.word	0x40001000

08002818 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin= BOTON_Pin){
 8002822:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002826:	80fb      	strh	r3, [r7, #6]
		programa_actual = (programa_actual +1)%total_programs;
 8002828:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <HAL_GPIO_EXTI_Callback+0x38>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	425a      	negs	r2, r3
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	f002 0207 	and.w	r2, r2, #7
 8002838:	bf58      	it	pl
 800283a:	4253      	negpl	r3, r2
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <HAL_GPIO_EXTI_Callback+0x38>)
 8002840:	701a      	strb	r2, [r3, #0]
	}

}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20006425 	.word	0x20006425

08002854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002858:	b672      	cpsid	i
}
 800285a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <Error_Handler+0x8>

08002860 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	@ 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a17      	ldr	r2, [pc, #92]	@ (80028dc <HAL_ADC_MspInit+0x7c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d127      	bne.n	80028d2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	4b16      	ldr	r3, [pc, #88]	@ (80028e0 <HAL_ADC_MspInit+0x80>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	4a15      	ldr	r2, [pc, #84]	@ (80028e0 <HAL_ADC_MspInit+0x80>)
 800288c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002890:	6453      	str	r3, [r2, #68]	@ 0x44
 8002892:	4b13      	ldr	r3, [pc, #76]	@ (80028e0 <HAL_ADC_MspInit+0x80>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	4b0f      	ldr	r3, [pc, #60]	@ (80028e0 <HAL_ADC_MspInit+0x80>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	4a0e      	ldr	r2, [pc, #56]	@ (80028e0 <HAL_ADC_MspInit+0x80>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ae:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <HAL_ADC_MspInit+0x80>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028ba:	2310      	movs	r3, #16
 80028bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028be:	2303      	movs	r3, #3
 80028c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	4619      	mov	r1, r3
 80028cc:	4805      	ldr	r0, [pc, #20]	@ (80028e4 <HAL_ADC_MspInit+0x84>)
 80028ce:	f000 fe87 	bl	80035e0 <HAL_GPIO_Init>

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 80028d2:	bf00      	nop
 80028d4:	3728      	adds	r7, #40	@ 0x28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40012100 	.word	0x40012100
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40020000 	.word	0x40020000

080028e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002924 <HAL_TIM_Base_MspInit+0x3c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10d      	bne.n	8002916 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <HAL_TIM_Base_MspInit+0x40>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	4a09      	ldr	r2, [pc, #36]	@ (8002928 <HAL_TIM_Base_MspInit+0x40>)
 8002904:	f043 0310 	orr.w	r3, r3, #16
 8002908:	6413      	str	r3, [r2, #64]	@ 0x40
 800290a:	4b07      	ldr	r3, [pc, #28]	@ (8002928 <HAL_TIM_Base_MspInit+0x40>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40001000 	.word	0x40001000
 8002928:	40023800 	.word	0x40023800

0800292c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <NMI_Handler+0x4>

08002934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <HardFault_Handler+0x4>

0800293c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <MemManage_Handler+0x4>

08002944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <BusFault_Handler+0x4>

0800294c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002950:	bf00      	nop
 8002952:	e7fd      	b.n	8002950 <UsageFault_Handler+0x4>

08002954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002982:	f000 f97d 	bl	8002c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}

0800298a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 800298e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002992:	f000 ffb9 	bl	8003908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a4:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <_sbrk+0x5c>)
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <_sbrk+0x60>)
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b0:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b8:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <_sbrk+0x64>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	@ (8002a04 <_sbrk+0x68>)
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029be:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029cc:	f001 fa72 	bl	8003eb4 <__errno>
 80029d0:	4603      	mov	r3, r0
 80029d2:	220c      	movs	r2, #12
 80029d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029da:	e009      	b.n	80029f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029dc:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a05      	ldr	r2, [pc, #20]	@ (8002a00 <_sbrk+0x64>)
 80029ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20020000 	.word	0x20020000
 80029fc:	00000400 	.word	0x00000400
 8002a00:	2001155c 	.word	0x2001155c
 8002a04:	200116b0 	.word	0x200116b0

08002a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <SystemInit+0x20>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	4a05      	ldr	r2, [pc, #20]	@ (8002a28 <SystemInit+0x20>)
 8002a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	2302      	movs	r3, #2
 8002a44:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002a46:	4b34      	ldr	r3, [pc, #208]	@ (8002b18 <SystemCoreClockUpdate+0xec>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d011      	beq.n	8002a7a <SystemCoreClockUpdate+0x4e>
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d844      	bhi.n	8002ae6 <SystemCoreClockUpdate+0xba>
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <SystemCoreClockUpdate+0x3e>
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d004      	beq.n	8002a72 <SystemCoreClockUpdate+0x46>
 8002a68:	e03d      	b.n	8002ae6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002b1c <SystemCoreClockUpdate+0xf0>)
 8002a6c:	4a2c      	ldr	r2, [pc, #176]	@ (8002b20 <SystemCoreClockUpdate+0xf4>)
 8002a6e:	601a      	str	r2, [r3, #0]
      break;
 8002a70:	e03d      	b.n	8002aee <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002a72:	4b2a      	ldr	r3, [pc, #168]	@ (8002b1c <SystemCoreClockUpdate+0xf0>)
 8002a74:	4a2b      	ldr	r2, [pc, #172]	@ (8002b24 <SystemCoreClockUpdate+0xf8>)
 8002a76:	601a      	str	r2, [r3, #0]
      break;
 8002a78:	e039      	b.n	8002aee <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002a7a:	4b27      	ldr	r3, [pc, #156]	@ (8002b18 <SystemCoreClockUpdate+0xec>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	0d9b      	lsrs	r3, r3, #22
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a86:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <SystemCoreClockUpdate+0xec>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a8e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00c      	beq.n	8002ab0 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002a96:	4a23      	ldr	r2, [pc, #140]	@ (8002b24 <SystemCoreClockUpdate+0xf8>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b18 <SystemCoreClockUpdate+0xec>)
 8002aa0:	6852      	ldr	r2, [r2, #4]
 8002aa2:	0992      	lsrs	r2, r2, #6
 8002aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa8:	fb02 f303 	mul.w	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e00b      	b.n	8002ac8 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <SystemCoreClockUpdate+0xf4>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	4a17      	ldr	r2, [pc, #92]	@ (8002b18 <SystemCoreClockUpdate+0xec>)
 8002aba:	6852      	ldr	r2, [r2, #4]
 8002abc:	0992      	lsrs	r2, r2, #6
 8002abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002ac8:	4b13      	ldr	r3, [pc, #76]	@ (8002b18 <SystemCoreClockUpdate+0xec>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	4a0e      	ldr	r2, [pc, #56]	@ (8002b1c <SystemCoreClockUpdate+0xf0>)
 8002ae2:	6013      	str	r3, [r2, #0]
      break;
 8002ae4:	e003      	b.n	8002aee <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <SystemCoreClockUpdate+0xf0>)
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b20 <SystemCoreClockUpdate+0xf4>)
 8002aea:	601a      	str	r2, [r3, #0]
      break;
 8002aec:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <SystemCoreClockUpdate+0xec>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	4a0b      	ldr	r2, [pc, #44]	@ (8002b28 <SystemCoreClockUpdate+0xfc>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002afe:	4b07      	ldr	r3, [pc, #28]	@ (8002b1c <SystemCoreClockUpdate+0xf0>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
 8002b08:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <SystemCoreClockUpdate+0xf0>)
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	20006428 	.word	0x20006428
 8002b20:	00f42400 	.word	0x00f42400
 8002b24:	007a1200 	.word	0x007a1200
 8002b28:	08004eec 	.word	0x08004eec

08002b2c <__NVIC_EnableIRQ>:
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	db0b      	blt.n	8002b56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	f003 021f 	and.w	r2, r3, #31
 8002b44:	4907      	ldr	r1, [pc, #28]	@ (8002b64 <__NVIC_EnableIRQ+0x38>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000e100 	.word	0xe000e100

08002b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db0a      	blt.n	8002b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	490c      	ldr	r1, [pc, #48]	@ (8002bb4 <__NVIC_SetPriority+0x4c>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	0112      	lsls	r2, r2, #4
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b90:	e00a      	b.n	8002ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4908      	ldr	r1, [pc, #32]	@ (8002bb8 <__NVIC_SetPriority+0x50>)
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	3b04      	subs	r3, #4
 8002ba0:	0112      	lsls	r2, r2, #4
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	761a      	strb	r2, [r3, #24]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000e100 	.word	0xe000e100
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bcc:	d301      	bcc.n	8002bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e00f      	b.n	8002bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <SysTick_Config+0x40>)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bda:	210f      	movs	r1, #15
 8002bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002be0:	f7ff ffc2 	bl	8002b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be4:	4b05      	ldr	r3, [pc, #20]	@ (8002bfc <SysTick_Config+0x40>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bea:	4b04      	ldr	r3, [pc, #16]	@ (8002bfc <SysTick_Config+0x40>)
 8002bec:	2207      	movs	r2, #7
 8002bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	e000e010 	.word	0xe000e010

08002c00 <SysTick_Init>:
#include "stm32f446xx.h"

volatile uint32_t ticks;

// Call this after setting up the clock
void SysTick_Init(void) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
    // Enable the SysTick interrupt every 1ms
    SysTick_Config(SystemCoreClock / 1000);
 8002c04:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <SysTick_Init+0x24>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a07      	ldr	r2, [pc, #28]	@ (8002c28 <SysTick_Init+0x28>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	099b      	lsrs	r3, r3, #6
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ffd3 	bl	8002bbc <SysTick_Config>
    NVIC_EnableIRQ(SysTick_IRQn);
 8002c16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c1a:	f7ff ff87 	bl	8002b2c <__NVIC_EnableIRQ>
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20006428 	.word	0x20006428
 8002c28:	10624dd3 	.word	0x10624dd3

08002c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c30:	f7ff feea 	bl	8002a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c34:	480c      	ldr	r0, [pc, #48]	@ (8002c68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c36:	490d      	ldr	r1, [pc, #52]	@ (8002c6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c38:	4a0d      	ldr	r2, [pc, #52]	@ (8002c70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c3c:	e002      	b.n	8002c44 <LoopCopyDataInit>

08002c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c42:	3304      	adds	r3, #4

08002c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c48:	d3f9      	bcc.n	8002c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002c78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c50:	e001      	b.n	8002c56 <LoopFillZerobss>

08002c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c54:	3204      	adds	r2, #4

08002c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c58:	d3fb      	bcc.n	8002c52 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c5a:	f001 f931 	bl	8003ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c5e:	f7ff fb5b 	bl	8002318 <main>
  bx  lr    
 8002c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c6c:	20006480 	.word	0x20006480
  ldr r2, =_sidata
 8002c70:	080052d4 	.word	0x080052d4
  ldr r2, =_sbss
 8002c74:	20006480 	.word	0x20006480
  ldr r4, =_ebss
 8002c78:	200116ac 	.word	0x200116ac

08002c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c7c:	e7fe      	b.n	8002c7c <ADC_IRQHandler>
	...

08002c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <HAL_IncTick+0x20>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <HAL_IncTick+0x24>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <HAL_IncTick+0x24>)
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	2000642c 	.word	0x2000642c
 8002ca4:	20011560 	.word	0x20011560

08002ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cac:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <HAL_GetTick+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20011560 	.word	0x20011560

08002cc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e033      	b.n	8002d3e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fdbe 	bl	8002860 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d118      	bne.n	8002d30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d06:	f023 0302 	bic.w	r3, r3, #2
 8002d0a:	f043 0202 	orr.w	r2, r3, #2
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fab4 	bl	8003280 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	f023 0303 	bic.w	r3, r3, #3
 8002d26:	f043 0201 	orr.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d2e:	e001      	b.n	8002d34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_Start+0x1a>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e0b2      	b.n	8002ec8 <HAL_ADC_Start+0x180>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d018      	beq.n	8002daa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d88:	4b52      	ldr	r3, [pc, #328]	@ (8002ed4 <HAL_ADC_Start+0x18c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a52      	ldr	r2, [pc, #328]	@ (8002ed8 <HAL_ADC_Start+0x190>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0c9a      	lsrs	r2, r3, #18
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002d9c:	e002      	b.n	8002da4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f9      	bne.n	8002d9e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d17a      	bne.n	8002eae <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002de2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002df6:	d106      	bne.n	8002e06 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfc:	f023 0206 	bic.w	r2, r3, #6
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e04:	e002      	b.n	8002e0c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e14:	4b31      	ldr	r3, [pc, #196]	@ (8002edc <HAL_ADC_Start+0x194>)
 8002e16:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002e20:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d12a      	bne.n	8002e84 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee0 <HAL_ADC_Start+0x198>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d015      	beq.n	8002e64 <HAL_ADC_Start+0x11c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a29      	ldr	r2, [pc, #164]	@ (8002ee4 <HAL_ADC_Start+0x19c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d105      	bne.n	8002e4e <HAL_ADC_Start+0x106>
 8002e42:	4b26      	ldr	r3, [pc, #152]	@ (8002edc <HAL_ADC_Start+0x194>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a25      	ldr	r2, [pc, #148]	@ (8002ee8 <HAL_ADC_Start+0x1a0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d136      	bne.n	8002ec6 <HAL_ADC_Start+0x17e>
 8002e58:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <HAL_ADC_Start+0x194>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d130      	bne.n	8002ec6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d129      	bne.n	8002ec6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	e020      	b.n	8002ec6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a15      	ldr	r2, [pc, #84]	@ (8002ee0 <HAL_ADC_Start+0x198>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d11b      	bne.n	8002ec6 <HAL_ADC_Start+0x17e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d114      	bne.n	8002ec6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	e00b      	b.n	8002ec6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	f043 0210 	orr.w	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	20006428 	.word	0x20006428
 8002ed8:	431bde83 	.word	0x431bde83
 8002edc:	40012300 	.word	0x40012300
 8002ee0:	40012000 	.word	0x40012000
 8002ee4:	40012100 	.word	0x40012100
 8002ee8:	40012200 	.word	0x40012200

08002eec <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f08:	d113      	bne.n	8002f32 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f18:	d10b      	bne.n	8002f32 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e063      	b.n	8002ffa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f32:	f7ff feb9 	bl	8002ca8 <HAL_GetTick>
 8002f36:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f38:	e021      	b.n	8002f7e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f40:	d01d      	beq.n	8002f7e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <HAL_ADC_PollForConversion+0x6c>
 8002f48:	f7ff feae 	bl	8002ca8 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d212      	bcs.n	8002f7e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d00b      	beq.n	8002f7e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f043 0204 	orr.w	r2, r3, #4
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e03d      	b.n	8002ffa <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d1d6      	bne.n	8002f3a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0212 	mvn.w	r2, #18
 8002f94:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d123      	bne.n	8002ff8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d11f      	bne.n	8002ff8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d006      	beq.n	8002fd4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d111      	bne.n	8002ff8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	f043 0201 	orr.w	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x1c>
 8003034:	2302      	movs	r3, #2
 8003036:	e113      	b.n	8003260 <HAL_ADC_ConfigChannel+0x244>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b09      	cmp	r3, #9
 8003046:	d925      	bls.n	8003094 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68d9      	ldr	r1, [r3, #12]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	b29b      	uxth	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	3b1e      	subs	r3, #30
 800305e:	2207      	movs	r2, #7
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43da      	mvns	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	400a      	ands	r2, r1
 800306c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68d9      	ldr	r1, [r3, #12]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	4618      	mov	r0, r3
 8003080:	4603      	mov	r3, r0
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4403      	add	r3, r0
 8003086:	3b1e      	subs	r3, #30
 8003088:	409a      	lsls	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	e022      	b.n	80030da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6919      	ldr	r1, [r3, #16]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	2207      	movs	r2, #7
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	400a      	ands	r2, r1
 80030b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6919      	ldr	r1, [r3, #16]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	4618      	mov	r0, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4403      	add	r3, r0
 80030d0:	409a      	lsls	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d824      	bhi.n	800312c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	3b05      	subs	r3, #5
 80030f4:	221f      	movs	r2, #31
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43da      	mvns	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	400a      	ands	r2, r1
 8003102:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	4618      	mov	r0, r3
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	3b05      	subs	r3, #5
 800311e:	fa00 f203 	lsl.w	r2, r0, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	635a      	str	r2, [r3, #52]	@ 0x34
 800312a:	e04c      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d824      	bhi.n	800317e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	3b23      	subs	r3, #35	@ 0x23
 8003146:	221f      	movs	r2, #31
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43da      	mvns	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	400a      	ands	r2, r1
 8003154:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	4618      	mov	r0, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	3b23      	subs	r3, #35	@ 0x23
 8003170:	fa00 f203 	lsl.w	r2, r0, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30
 800317c:	e023      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	3b41      	subs	r3, #65	@ 0x41
 8003190:	221f      	movs	r2, #31
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43da      	mvns	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	400a      	ands	r2, r1
 800319e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	4618      	mov	r0, r3
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	3b41      	subs	r3, #65	@ 0x41
 80031ba:	fa00 f203 	lsl.w	r2, r0, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031c6:	4b29      	ldr	r3, [pc, #164]	@ (800326c <HAL_ADC_ConfigChannel+0x250>)
 80031c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a28      	ldr	r2, [pc, #160]	@ (8003270 <HAL_ADC_ConfigChannel+0x254>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d10f      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1d8>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b12      	cmp	r3, #18
 80031da:	d10b      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <HAL_ADC_ConfigChannel+0x254>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d12b      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x23a>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1c      	ldr	r2, [pc, #112]	@ (8003274 <HAL_ADC_ConfigChannel+0x258>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x1f4>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b11      	cmp	r3, #17
 800320e:	d122      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a11      	ldr	r2, [pc, #68]	@ (8003274 <HAL_ADC_ConfigChannel+0x258>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d111      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003232:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <HAL_ADC_ConfigChannel+0x25c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a11      	ldr	r2, [pc, #68]	@ (800327c <HAL_ADC_ConfigChannel+0x260>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	0c9a      	lsrs	r2, r3, #18
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003248:	e002      	b.n	8003250 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3b01      	subs	r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f9      	bne.n	800324a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40012300 	.word	0x40012300
 8003270:	40012000 	.word	0x40012000
 8003274:	10000012 	.word	0x10000012
 8003278:	20006428 	.word	0x20006428
 800327c:	431bde83 	.word	0x431bde83

08003280 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003288:	4b79      	ldr	r3, [pc, #484]	@ (8003470 <ADC_Init+0x1f0>)
 800328a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	021a      	lsls	r2, r3, #8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80032d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6899      	ldr	r1, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003312:	4a58      	ldr	r2, [pc, #352]	@ (8003474 <ADC_Init+0x1f4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d022      	beq.n	800335e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003326:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6899      	ldr	r1, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6899      	ldr	r1, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	e00f      	b.n	800337e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800336c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800337c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0202 	bic.w	r2, r2, #2
 800338c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6899      	ldr	r1, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7e1b      	ldrb	r3, [r3, #24]
 8003398:	005a      	lsls	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80033ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	3b01      	subs	r3, #1
 80033d8:	035a      	lsls	r2, r3, #13
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	e007      	b.n	80033f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003402:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	3b01      	subs	r3, #1
 8003410:	051a      	lsls	r2, r3, #20
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003436:	025a      	lsls	r2, r3, #9
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800344e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6899      	ldr	r1, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	029a      	lsls	r2, r3, #10
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40012300 	.word	0x40012300
 8003474:	0f000001 	.word	0x0f000001

08003478 <__NVIC_GetPriorityGrouping>:
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800347c:	4b04      	ldr	r3, [pc, #16]	@ (8003490 <__NVIC_GetPriorityGrouping+0x18>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	0a1b      	lsrs	r3, r3, #8
 8003482:	f003 0307 	and.w	r3, r3, #7
}
 8003486:	4618      	mov	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <__NVIC_EnableIRQ>:
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	db0b      	blt.n	80034be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	f003 021f 	and.w	r2, r3, #31
 80034ac:	4907      	ldr	r1, [pc, #28]	@ (80034cc <__NVIC_EnableIRQ+0x38>)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	2001      	movs	r0, #1
 80034b6:	fa00 f202 	lsl.w	r2, r0, r2
 80034ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	e000e100 	.word	0xe000e100

080034d0 <__NVIC_SetPriority>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	6039      	str	r1, [r7, #0]
 80034da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	db0a      	blt.n	80034fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	490c      	ldr	r1, [pc, #48]	@ (800351c <__NVIC_SetPriority+0x4c>)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	0112      	lsls	r2, r2, #4
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	440b      	add	r3, r1
 80034f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80034f8:	e00a      	b.n	8003510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	4908      	ldr	r1, [pc, #32]	@ (8003520 <__NVIC_SetPriority+0x50>)
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	3b04      	subs	r3, #4
 8003508:	0112      	lsls	r2, r2, #4
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	440b      	add	r3, r1
 800350e:	761a      	strb	r2, [r3, #24]
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000e100 	.word	0xe000e100
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <NVIC_EncodePriority>:
{
 8003524:	b480      	push	{r7}
 8003526:	b089      	sub	sp, #36	@ 0x24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f1c3 0307 	rsb	r3, r3, #7
 800353e:	2b04      	cmp	r3, #4
 8003540:	bf28      	it	cs
 8003542:	2304      	movcs	r3, #4
 8003544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3304      	adds	r3, #4
 800354a:	2b06      	cmp	r3, #6
 800354c:	d902      	bls.n	8003554 <NVIC_EncodePriority+0x30>
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3b03      	subs	r3, #3
 8003552:	e000      	b.n	8003556 <NVIC_EncodePriority+0x32>
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003558:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43da      	mvns	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	401a      	ands	r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800356c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fa01 f303 	lsl.w	r3, r1, r3
 8003576:	43d9      	mvns	r1, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800357c:	4313      	orrs	r3, r2
}
 800357e:	4618      	mov	r0, r3
 8003580:	3724      	adds	r7, #36	@ 0x24
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800358a:	b580      	push	{r7, lr}
 800358c:	b086      	sub	sp, #24
 800358e:	af00      	add	r7, sp, #0
 8003590:	4603      	mov	r3, r0
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800359c:	f7ff ff6c 	bl	8003478 <__NVIC_GetPriorityGrouping>
 80035a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	6978      	ldr	r0, [r7, #20]
 80035a8:	f7ff ffbc 	bl	8003524 <NVIC_EncodePriority>
 80035ac:	4602      	mov	r2, r0
 80035ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff ff8b 	bl	80034d0 <__NVIC_SetPriority>
}
 80035ba:	bf00      	nop
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	4603      	mov	r3, r0
 80035ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff5f 	bl	8003494 <__NVIC_EnableIRQ>
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	@ 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e165      	b.n	80038c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035fc:	2201      	movs	r2, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	429a      	cmp	r2, r3
 8003616:	f040 8154 	bne.w	80038c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d005      	beq.n	8003632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800362e:	2b02      	cmp	r3, #2
 8003630:	d130      	bne.n	8003694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2203      	movs	r2, #3
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003668:	2201      	movs	r2, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 0201 	and.w	r2, r3, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b03      	cmp	r3, #3
 800369e:	d017      	beq.n	80036d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	2203      	movs	r2, #3
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d123      	bne.n	8003724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	08da      	lsrs	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3208      	adds	r2, #8
 80036e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	220f      	movs	r2, #15
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	08da      	lsrs	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3208      	adds	r2, #8
 800371e:	69b9      	ldr	r1, [r7, #24]
 8003720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0203 	and.w	r2, r3, #3
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80ae 	beq.w	80038c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	4b5d      	ldr	r3, [pc, #372]	@ (80038e0 <HAL_GPIO_Init+0x300>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	4a5c      	ldr	r2, [pc, #368]	@ (80038e0 <HAL_GPIO_Init+0x300>)
 8003770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003774:	6453      	str	r3, [r2, #68]	@ 0x44
 8003776:	4b5a      	ldr	r3, [pc, #360]	@ (80038e0 <HAL_GPIO_Init+0x300>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003782:	4a58      	ldr	r2, [pc, #352]	@ (80038e4 <HAL_GPIO_Init+0x304>)
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	3302      	adds	r3, #2
 800378a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	220f      	movs	r2, #15
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4013      	ands	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4f      	ldr	r2, [pc, #316]	@ (80038e8 <HAL_GPIO_Init+0x308>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d025      	beq.n	80037fa <HAL_GPIO_Init+0x21a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a4e      	ldr	r2, [pc, #312]	@ (80038ec <HAL_GPIO_Init+0x30c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01f      	beq.n	80037f6 <HAL_GPIO_Init+0x216>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a4d      	ldr	r2, [pc, #308]	@ (80038f0 <HAL_GPIO_Init+0x310>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d019      	beq.n	80037f2 <HAL_GPIO_Init+0x212>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a4c      	ldr	r2, [pc, #304]	@ (80038f4 <HAL_GPIO_Init+0x314>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <HAL_GPIO_Init+0x20e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a4b      	ldr	r2, [pc, #300]	@ (80038f8 <HAL_GPIO_Init+0x318>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00d      	beq.n	80037ea <HAL_GPIO_Init+0x20a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a4a      	ldr	r2, [pc, #296]	@ (80038fc <HAL_GPIO_Init+0x31c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d007      	beq.n	80037e6 <HAL_GPIO_Init+0x206>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a49      	ldr	r2, [pc, #292]	@ (8003900 <HAL_GPIO_Init+0x320>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <HAL_GPIO_Init+0x202>
 80037de:	2306      	movs	r3, #6
 80037e0:	e00c      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037e2:	2307      	movs	r3, #7
 80037e4:	e00a      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037e6:	2305      	movs	r3, #5
 80037e8:	e008      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037ea:	2304      	movs	r3, #4
 80037ec:	e006      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037ee:	2303      	movs	r3, #3
 80037f0:	e004      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e002      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037fa:	2300      	movs	r3, #0
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	f002 0203 	and.w	r2, r2, #3
 8003802:	0092      	lsls	r2, r2, #2
 8003804:	4093      	lsls	r3, r2
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800380c:	4935      	ldr	r1, [pc, #212]	@ (80038e4 <HAL_GPIO_Init+0x304>)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	089b      	lsrs	r3, r3, #2
 8003812:	3302      	adds	r3, #2
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800381a:	4b3a      	ldr	r3, [pc, #232]	@ (8003904 <HAL_GPIO_Init+0x324>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800383e:	4a31      	ldr	r2, [pc, #196]	@ (8003904 <HAL_GPIO_Init+0x324>)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003844:	4b2f      	ldr	r3, [pc, #188]	@ (8003904 <HAL_GPIO_Init+0x324>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003868:	4a26      	ldr	r2, [pc, #152]	@ (8003904 <HAL_GPIO_Init+0x324>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800386e:	4b25      	ldr	r3, [pc, #148]	@ (8003904 <HAL_GPIO_Init+0x324>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003892:	4a1c      	ldr	r2, [pc, #112]	@ (8003904 <HAL_GPIO_Init+0x324>)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003898:	4b1a      	ldr	r3, [pc, #104]	@ (8003904 <HAL_GPIO_Init+0x324>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038bc:	4a11      	ldr	r2, [pc, #68]	@ (8003904 <HAL_GPIO_Init+0x324>)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3301      	adds	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b0f      	cmp	r3, #15
 80038cc:	f67f ae96 	bls.w	80035fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3724      	adds	r7, #36	@ 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40013800 	.word	0x40013800
 80038e8:	40020000 	.word	0x40020000
 80038ec:	40020400 	.word	0x40020400
 80038f0:	40020800 	.word	0x40020800
 80038f4:	40020c00 	.word	0x40020c00
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40021400 	.word	0x40021400
 8003900:	40021800 	.word	0x40021800
 8003904:	40013c00 	.word	0x40013c00

08003908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003912:	4b08      	ldr	r3, [pc, #32]	@ (8003934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d006      	beq.n	800392c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800391e:	4a05      	ldr	r2, [pc, #20]	@ (8003934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe ff76 	bl	8002818 <HAL_GPIO_EXTI_Callback>
  }
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40013c00 	.word	0x40013c00

08003938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e041      	b.n	80039ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fe ffc2 	bl	80028e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f000 f89e 	bl	8003ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d001      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e04e      	b.n	8003a8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a23      	ldr	r2, [pc, #140]	@ (8003a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d022      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x80>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a1a:	d01d      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x80>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d018      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x80>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d013      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x80>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00e      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x80>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003aac <HAL_TIM_Base_Start_IT+0xd4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d009      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x80>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a19      	ldr	r2, [pc, #100]	@ (8003ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x80>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a18      	ldr	r2, [pc, #96]	@ (8003ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d111      	bne.n	8003a7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b06      	cmp	r3, #6
 8003a68:	d010      	beq.n	8003a8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0201 	orr.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7a:	e007      	b.n	8003a8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40010000 	.word	0x40010000
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40000800 	.word	0x40000800
 8003aa8:	40000c00 	.word	0x40000c00
 8003aac:	40010400 	.word	0x40010400
 8003ab0:	40014000 	.word	0x40014000
 8003ab4:	40001800 	.word	0x40001800

08003ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a46      	ldr	r2, [pc, #280]	@ (8003be4 <TIM_Base_SetConfig+0x12c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <TIM_Base_SetConfig+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad6:	d00f      	beq.n	8003af8 <TIM_Base_SetConfig+0x40>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a43      	ldr	r2, [pc, #268]	@ (8003be8 <TIM_Base_SetConfig+0x130>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00b      	beq.n	8003af8 <TIM_Base_SetConfig+0x40>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a42      	ldr	r2, [pc, #264]	@ (8003bec <TIM_Base_SetConfig+0x134>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d007      	beq.n	8003af8 <TIM_Base_SetConfig+0x40>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a41      	ldr	r2, [pc, #260]	@ (8003bf0 <TIM_Base_SetConfig+0x138>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_Base_SetConfig+0x40>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a40      	ldr	r2, [pc, #256]	@ (8003bf4 <TIM_Base_SetConfig+0x13c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d108      	bne.n	8003b0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a35      	ldr	r2, [pc, #212]	@ (8003be4 <TIM_Base_SetConfig+0x12c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d02b      	beq.n	8003b6a <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b18:	d027      	beq.n	8003b6a <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a32      	ldr	r2, [pc, #200]	@ (8003be8 <TIM_Base_SetConfig+0x130>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d023      	beq.n	8003b6a <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a31      	ldr	r2, [pc, #196]	@ (8003bec <TIM_Base_SetConfig+0x134>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d01f      	beq.n	8003b6a <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a30      	ldr	r2, [pc, #192]	@ (8003bf0 <TIM_Base_SetConfig+0x138>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01b      	beq.n	8003b6a <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2f      	ldr	r2, [pc, #188]	@ (8003bf4 <TIM_Base_SetConfig+0x13c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d017      	beq.n	8003b6a <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8003bf8 <TIM_Base_SetConfig+0x140>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a2d      	ldr	r2, [pc, #180]	@ (8003bfc <TIM_Base_SetConfig+0x144>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00f      	beq.n	8003b6a <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8003c00 <TIM_Base_SetConfig+0x148>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00b      	beq.n	8003b6a <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a2b      	ldr	r2, [pc, #172]	@ (8003c04 <TIM_Base_SetConfig+0x14c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d007      	beq.n	8003b6a <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003c08 <TIM_Base_SetConfig+0x150>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d003      	beq.n	8003b6a <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a29      	ldr	r2, [pc, #164]	@ (8003c0c <TIM_Base_SetConfig+0x154>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d108      	bne.n	8003b7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a10      	ldr	r2, [pc, #64]	@ (8003be4 <TIM_Base_SetConfig+0x12c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_Base_SetConfig+0xf8>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <TIM_Base_SetConfig+0x13c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d103      	bne.n	8003bb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d105      	bne.n	8003bd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f023 0201 	bic.w	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	611a      	str	r2, [r3, #16]
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800
 8003bf0:	40000c00 	.word	0x40000c00
 8003bf4:	40010400 	.word	0x40010400
 8003bf8:	40014000 	.word	0x40014000
 8003bfc:	40014400 	.word	0x40014400
 8003c00:	40014800 	.word	0x40014800
 8003c04:	40001800 	.word	0x40001800
 8003c08:	40001c00 	.word	0x40001c00
 8003c0c:	40002000 	.word	0x40002000

08003c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e05a      	b.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a21      	ldr	r2, [pc, #132]	@ (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c74:	d01d      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d018      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a18      	ldr	r2, [pc, #96]	@ (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	@ (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a15      	ldr	r2, [pc, #84]	@ (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10c      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40010000 	.word	0x40010000
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800
 8003cf8:	40000c00 	.word	0x40000c00
 8003cfc:	40010400 	.word	0x40010400
 8003d00:	40014000 	.word	0x40014000
 8003d04:	40001800 	.word	0x40001800

08003d08 <malloc>:
 8003d08:	4b02      	ldr	r3, [pc, #8]	@ (8003d14 <malloc+0xc>)
 8003d0a:	4601      	mov	r1, r0
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	f000 b82d 	b.w	8003d6c <_malloc_r>
 8003d12:	bf00      	nop
 8003d14:	20006430 	.word	0x20006430

08003d18 <free>:
 8003d18:	4b02      	ldr	r3, [pc, #8]	@ (8003d24 <free+0xc>)
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	f000 b903 	b.w	8003f28 <_free_r>
 8003d22:	bf00      	nop
 8003d24:	20006430 	.word	0x20006430

08003d28 <sbrk_aligned>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	4e0f      	ldr	r6, [pc, #60]	@ (8003d68 <sbrk_aligned+0x40>)
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	6831      	ldr	r1, [r6, #0]
 8003d30:	4605      	mov	r5, r0
 8003d32:	b911      	cbnz	r1, 8003d3a <sbrk_aligned+0x12>
 8003d34:	f000 f8ae 	bl	8003e94 <_sbrk_r>
 8003d38:	6030      	str	r0, [r6, #0]
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	f000 f8a9 	bl	8003e94 <_sbrk_r>
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	d103      	bne.n	8003d4e <sbrk_aligned+0x26>
 8003d46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	bd70      	pop	{r4, r5, r6, pc}
 8003d4e:	1cc4      	adds	r4, r0, #3
 8003d50:	f024 0403 	bic.w	r4, r4, #3
 8003d54:	42a0      	cmp	r0, r4
 8003d56:	d0f8      	beq.n	8003d4a <sbrk_aligned+0x22>
 8003d58:	1a21      	subs	r1, r4, r0
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f000 f89a 	bl	8003e94 <_sbrk_r>
 8003d60:	3001      	adds	r0, #1
 8003d62:	d1f2      	bne.n	8003d4a <sbrk_aligned+0x22>
 8003d64:	e7ef      	b.n	8003d46 <sbrk_aligned+0x1e>
 8003d66:	bf00      	nop
 8003d68:	20011564 	.word	0x20011564

08003d6c <_malloc_r>:
 8003d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d70:	1ccd      	adds	r5, r1, #3
 8003d72:	f025 0503 	bic.w	r5, r5, #3
 8003d76:	3508      	adds	r5, #8
 8003d78:	2d0c      	cmp	r5, #12
 8003d7a:	bf38      	it	cc
 8003d7c:	250c      	movcc	r5, #12
 8003d7e:	2d00      	cmp	r5, #0
 8003d80:	4606      	mov	r6, r0
 8003d82:	db01      	blt.n	8003d88 <_malloc_r+0x1c>
 8003d84:	42a9      	cmp	r1, r5
 8003d86:	d904      	bls.n	8003d92 <_malloc_r+0x26>
 8003d88:	230c      	movs	r3, #12
 8003d8a:	6033      	str	r3, [r6, #0]
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e68 <_malloc_r+0xfc>
 8003d96:	f000 f869 	bl	8003e6c <__malloc_lock>
 8003d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d9e:	461c      	mov	r4, r3
 8003da0:	bb44      	cbnz	r4, 8003df4 <_malloc_r+0x88>
 8003da2:	4629      	mov	r1, r5
 8003da4:	4630      	mov	r0, r6
 8003da6:	f7ff ffbf 	bl	8003d28 <sbrk_aligned>
 8003daa:	1c43      	adds	r3, r0, #1
 8003dac:	4604      	mov	r4, r0
 8003dae:	d158      	bne.n	8003e62 <_malloc_r+0xf6>
 8003db0:	f8d8 4000 	ldr.w	r4, [r8]
 8003db4:	4627      	mov	r7, r4
 8003db6:	2f00      	cmp	r7, #0
 8003db8:	d143      	bne.n	8003e42 <_malloc_r+0xd6>
 8003dba:	2c00      	cmp	r4, #0
 8003dbc:	d04b      	beq.n	8003e56 <_malloc_r+0xea>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	4639      	mov	r1, r7
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	eb04 0903 	add.w	r9, r4, r3
 8003dc8:	f000 f864 	bl	8003e94 <_sbrk_r>
 8003dcc:	4581      	cmp	r9, r0
 8003dce:	d142      	bne.n	8003e56 <_malloc_r+0xea>
 8003dd0:	6821      	ldr	r1, [r4, #0]
 8003dd2:	1a6d      	subs	r5, r5, r1
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f7ff ffa6 	bl	8003d28 <sbrk_aligned>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d03a      	beq.n	8003e56 <_malloc_r+0xea>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	442b      	add	r3, r5
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	f8d8 3000 	ldr.w	r3, [r8]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	bb62      	cbnz	r2, 8003e48 <_malloc_r+0xdc>
 8003dee:	f8c8 7000 	str.w	r7, [r8]
 8003df2:	e00f      	b.n	8003e14 <_malloc_r+0xa8>
 8003df4:	6822      	ldr	r2, [r4, #0]
 8003df6:	1b52      	subs	r2, r2, r5
 8003df8:	d420      	bmi.n	8003e3c <_malloc_r+0xd0>
 8003dfa:	2a0b      	cmp	r2, #11
 8003dfc:	d917      	bls.n	8003e2e <_malloc_r+0xc2>
 8003dfe:	1961      	adds	r1, r4, r5
 8003e00:	42a3      	cmp	r3, r4
 8003e02:	6025      	str	r5, [r4, #0]
 8003e04:	bf18      	it	ne
 8003e06:	6059      	strne	r1, [r3, #4]
 8003e08:	6863      	ldr	r3, [r4, #4]
 8003e0a:	bf08      	it	eq
 8003e0c:	f8c8 1000 	streq.w	r1, [r8]
 8003e10:	5162      	str	r2, [r4, r5]
 8003e12:	604b      	str	r3, [r1, #4]
 8003e14:	4630      	mov	r0, r6
 8003e16:	f000 f82f 	bl	8003e78 <__malloc_unlock>
 8003e1a:	f104 000b 	add.w	r0, r4, #11
 8003e1e:	1d23      	adds	r3, r4, #4
 8003e20:	f020 0007 	bic.w	r0, r0, #7
 8003e24:	1ac2      	subs	r2, r0, r3
 8003e26:	bf1c      	itt	ne
 8003e28:	1a1b      	subne	r3, r3, r0
 8003e2a:	50a3      	strne	r3, [r4, r2]
 8003e2c:	e7af      	b.n	8003d8e <_malloc_r+0x22>
 8003e2e:	6862      	ldr	r2, [r4, #4]
 8003e30:	42a3      	cmp	r3, r4
 8003e32:	bf0c      	ite	eq
 8003e34:	f8c8 2000 	streq.w	r2, [r8]
 8003e38:	605a      	strne	r2, [r3, #4]
 8003e3a:	e7eb      	b.n	8003e14 <_malloc_r+0xa8>
 8003e3c:	4623      	mov	r3, r4
 8003e3e:	6864      	ldr	r4, [r4, #4]
 8003e40:	e7ae      	b.n	8003da0 <_malloc_r+0x34>
 8003e42:	463c      	mov	r4, r7
 8003e44:	687f      	ldr	r7, [r7, #4]
 8003e46:	e7b6      	b.n	8003db6 <_malloc_r+0x4a>
 8003e48:	461a      	mov	r2, r3
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	42a3      	cmp	r3, r4
 8003e4e:	d1fb      	bne.n	8003e48 <_malloc_r+0xdc>
 8003e50:	2300      	movs	r3, #0
 8003e52:	6053      	str	r3, [r2, #4]
 8003e54:	e7de      	b.n	8003e14 <_malloc_r+0xa8>
 8003e56:	230c      	movs	r3, #12
 8003e58:	6033      	str	r3, [r6, #0]
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	f000 f80c 	bl	8003e78 <__malloc_unlock>
 8003e60:	e794      	b.n	8003d8c <_malloc_r+0x20>
 8003e62:	6005      	str	r5, [r0, #0]
 8003e64:	e7d6      	b.n	8003e14 <_malloc_r+0xa8>
 8003e66:	bf00      	nop
 8003e68:	20011568 	.word	0x20011568

08003e6c <__malloc_lock>:
 8003e6c:	4801      	ldr	r0, [pc, #4]	@ (8003e74 <__malloc_lock+0x8>)
 8003e6e:	f000 b84b 	b.w	8003f08 <__retarget_lock_acquire_recursive>
 8003e72:	bf00      	nop
 8003e74:	200116a8 	.word	0x200116a8

08003e78 <__malloc_unlock>:
 8003e78:	4801      	ldr	r0, [pc, #4]	@ (8003e80 <__malloc_unlock+0x8>)
 8003e7a:	f000 b846 	b.w	8003f0a <__retarget_lock_release_recursive>
 8003e7e:	bf00      	nop
 8003e80:	200116a8 	.word	0x200116a8

08003e84 <memset>:
 8003e84:	4402      	add	r2, r0
 8003e86:	4603      	mov	r3, r0
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d100      	bne.n	8003e8e <memset+0xa>
 8003e8c:	4770      	bx	lr
 8003e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e92:	e7f9      	b.n	8003e88 <memset+0x4>

08003e94 <_sbrk_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4d06      	ldr	r5, [pc, #24]	@ (8003eb0 <_sbrk_r+0x1c>)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	602b      	str	r3, [r5, #0]
 8003ea0:	f7fe fd7c 	bl	800299c <_sbrk>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d102      	bne.n	8003eae <_sbrk_r+0x1a>
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	b103      	cbz	r3, 8003eae <_sbrk_r+0x1a>
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
 8003eb0:	200116a4 	.word	0x200116a4

08003eb4 <__errno>:
 8003eb4:	4b01      	ldr	r3, [pc, #4]	@ (8003ebc <__errno+0x8>)
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20006430 	.word	0x20006430

08003ec0 <__libc_init_array>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ef8 <__libc_init_array+0x38>)
 8003ec4:	4c0d      	ldr	r4, [pc, #52]	@ (8003efc <__libc_init_array+0x3c>)
 8003ec6:	1b64      	subs	r4, r4, r5
 8003ec8:	10a4      	asrs	r4, r4, #2
 8003eca:	2600      	movs	r6, #0
 8003ecc:	42a6      	cmp	r6, r4
 8003ece:	d109      	bne.n	8003ee4 <__libc_init_array+0x24>
 8003ed0:	4d0b      	ldr	r5, [pc, #44]	@ (8003f00 <__libc_init_array+0x40>)
 8003ed2:	4c0c      	ldr	r4, [pc, #48]	@ (8003f04 <__libc_init_array+0x44>)
 8003ed4:	f000 fe68 	bl	8004ba8 <_init>
 8003ed8:	1b64      	subs	r4, r4, r5
 8003eda:	10a4      	asrs	r4, r4, #2
 8003edc:	2600      	movs	r6, #0
 8003ede:	42a6      	cmp	r6, r4
 8003ee0:	d105      	bne.n	8003eee <__libc_init_array+0x2e>
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee8:	4798      	blx	r3
 8003eea:	3601      	adds	r6, #1
 8003eec:	e7ee      	b.n	8003ecc <__libc_init_array+0xc>
 8003eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef2:	4798      	blx	r3
 8003ef4:	3601      	adds	r6, #1
 8003ef6:	e7f2      	b.n	8003ede <__libc_init_array+0x1e>
 8003ef8:	080052cc 	.word	0x080052cc
 8003efc:	080052cc 	.word	0x080052cc
 8003f00:	080052cc 	.word	0x080052cc
 8003f04:	080052d0 	.word	0x080052d0

08003f08 <__retarget_lock_acquire_recursive>:
 8003f08:	4770      	bx	lr

08003f0a <__retarget_lock_release_recursive>:
 8003f0a:	4770      	bx	lr

08003f0c <memcpy>:
 8003f0c:	440a      	add	r2, r1
 8003f0e:	4291      	cmp	r1, r2
 8003f10:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003f14:	d100      	bne.n	8003f18 <memcpy+0xc>
 8003f16:	4770      	bx	lr
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f22:	4291      	cmp	r1, r2
 8003f24:	d1f9      	bne.n	8003f1a <memcpy+0xe>
 8003f26:	bd10      	pop	{r4, pc}

08003f28 <_free_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4605      	mov	r5, r0
 8003f2c:	2900      	cmp	r1, #0
 8003f2e:	d041      	beq.n	8003fb4 <_free_r+0x8c>
 8003f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f34:	1f0c      	subs	r4, r1, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bfb8      	it	lt
 8003f3a:	18e4      	addlt	r4, r4, r3
 8003f3c:	f7ff ff96 	bl	8003e6c <__malloc_lock>
 8003f40:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb8 <_free_r+0x90>)
 8003f42:	6813      	ldr	r3, [r2, #0]
 8003f44:	b933      	cbnz	r3, 8003f54 <_free_r+0x2c>
 8003f46:	6063      	str	r3, [r4, #4]
 8003f48:	6014      	str	r4, [r2, #0]
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f50:	f7ff bf92 	b.w	8003e78 <__malloc_unlock>
 8003f54:	42a3      	cmp	r3, r4
 8003f56:	d908      	bls.n	8003f6a <_free_r+0x42>
 8003f58:	6820      	ldr	r0, [r4, #0]
 8003f5a:	1821      	adds	r1, r4, r0
 8003f5c:	428b      	cmp	r3, r1
 8003f5e:	bf01      	itttt	eq
 8003f60:	6819      	ldreq	r1, [r3, #0]
 8003f62:	685b      	ldreq	r3, [r3, #4]
 8003f64:	1809      	addeq	r1, r1, r0
 8003f66:	6021      	streq	r1, [r4, #0]
 8003f68:	e7ed      	b.n	8003f46 <_free_r+0x1e>
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	b10b      	cbz	r3, 8003f74 <_free_r+0x4c>
 8003f70:	42a3      	cmp	r3, r4
 8003f72:	d9fa      	bls.n	8003f6a <_free_r+0x42>
 8003f74:	6811      	ldr	r1, [r2, #0]
 8003f76:	1850      	adds	r0, r2, r1
 8003f78:	42a0      	cmp	r0, r4
 8003f7a:	d10b      	bne.n	8003f94 <_free_r+0x6c>
 8003f7c:	6820      	ldr	r0, [r4, #0]
 8003f7e:	4401      	add	r1, r0
 8003f80:	1850      	adds	r0, r2, r1
 8003f82:	4283      	cmp	r3, r0
 8003f84:	6011      	str	r1, [r2, #0]
 8003f86:	d1e0      	bne.n	8003f4a <_free_r+0x22>
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	6053      	str	r3, [r2, #4]
 8003f8e:	4408      	add	r0, r1
 8003f90:	6010      	str	r0, [r2, #0]
 8003f92:	e7da      	b.n	8003f4a <_free_r+0x22>
 8003f94:	d902      	bls.n	8003f9c <_free_r+0x74>
 8003f96:	230c      	movs	r3, #12
 8003f98:	602b      	str	r3, [r5, #0]
 8003f9a:	e7d6      	b.n	8003f4a <_free_r+0x22>
 8003f9c:	6820      	ldr	r0, [r4, #0]
 8003f9e:	1821      	adds	r1, r4, r0
 8003fa0:	428b      	cmp	r3, r1
 8003fa2:	bf04      	itt	eq
 8003fa4:	6819      	ldreq	r1, [r3, #0]
 8003fa6:	685b      	ldreq	r3, [r3, #4]
 8003fa8:	6063      	str	r3, [r4, #4]
 8003faa:	bf04      	itt	eq
 8003fac:	1809      	addeq	r1, r1, r0
 8003fae:	6021      	streq	r1, [r4, #0]
 8003fb0:	6054      	str	r4, [r2, #4]
 8003fb2:	e7ca      	b.n	8003f4a <_free_r+0x22>
 8003fb4:	bd38      	pop	{r3, r4, r5, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20011568 	.word	0x20011568

08003fbc <sqrtf>:
 8003fbc:	b508      	push	{r3, lr}
 8003fbe:	ed2d 8b02 	vpush	{d8}
 8003fc2:	eeb0 8a40 	vmov.f32	s16, s0
 8003fc6:	f000 f8f7 	bl	80041b8 <__ieee754_sqrtf>
 8003fca:	eeb4 8a48 	vcmp.f32	s16, s16
 8003fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd2:	d60c      	bvs.n	8003fee <sqrtf+0x32>
 8003fd4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8003ff4 <sqrtf+0x38>
 8003fd8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe0:	d505      	bpl.n	8003fee <sqrtf+0x32>
 8003fe2:	f7ff ff67 	bl	8003eb4 <__errno>
 8003fe6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8003fea:	2321      	movs	r3, #33	@ 0x21
 8003fec:	6003      	str	r3, [r0, #0]
 8003fee:	ecbd 8b02 	vpop	{d8}
 8003ff2:	bd08      	pop	{r3, pc}
 8003ff4:	00000000 	.word	0x00000000

08003ff8 <cosf>:
 8003ff8:	ee10 3a10 	vmov	r3, s0
 8003ffc:	b507      	push	{r0, r1, r2, lr}
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8004078 <cosf+0x80>)
 8004000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004004:	4293      	cmp	r3, r2
 8004006:	d806      	bhi.n	8004016 <cosf+0x1e>
 8004008:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800407c <cosf+0x84>
 800400c:	b003      	add	sp, #12
 800400e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004012:	f000 b8d5 	b.w	80041c0 <__kernel_cosf>
 8004016:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800401a:	d304      	bcc.n	8004026 <cosf+0x2e>
 800401c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004020:	b003      	add	sp, #12
 8004022:	f85d fb04 	ldr.w	pc, [sp], #4
 8004026:	4668      	mov	r0, sp
 8004028:	f000 f96a 	bl	8004300 <__ieee754_rem_pio2f>
 800402c:	f000 0003 	and.w	r0, r0, #3
 8004030:	2801      	cmp	r0, #1
 8004032:	d009      	beq.n	8004048 <cosf+0x50>
 8004034:	2802      	cmp	r0, #2
 8004036:	d010      	beq.n	800405a <cosf+0x62>
 8004038:	b9b0      	cbnz	r0, 8004068 <cosf+0x70>
 800403a:	eddd 0a01 	vldr	s1, [sp, #4]
 800403e:	ed9d 0a00 	vldr	s0, [sp]
 8004042:	f000 f8bd 	bl	80041c0 <__kernel_cosf>
 8004046:	e7eb      	b.n	8004020 <cosf+0x28>
 8004048:	eddd 0a01 	vldr	s1, [sp, #4]
 800404c:	ed9d 0a00 	vldr	s0, [sp]
 8004050:	f000 f90e 	bl	8004270 <__kernel_sinf>
 8004054:	eeb1 0a40 	vneg.f32	s0, s0
 8004058:	e7e2      	b.n	8004020 <cosf+0x28>
 800405a:	eddd 0a01 	vldr	s1, [sp, #4]
 800405e:	ed9d 0a00 	vldr	s0, [sp]
 8004062:	f000 f8ad 	bl	80041c0 <__kernel_cosf>
 8004066:	e7f5      	b.n	8004054 <cosf+0x5c>
 8004068:	eddd 0a01 	vldr	s1, [sp, #4]
 800406c:	ed9d 0a00 	vldr	s0, [sp]
 8004070:	2001      	movs	r0, #1
 8004072:	f000 f8fd 	bl	8004270 <__kernel_sinf>
 8004076:	e7d3      	b.n	8004020 <cosf+0x28>
 8004078:	3f490fd8 	.word	0x3f490fd8
 800407c:	00000000 	.word	0x00000000

08004080 <sinf>:
 8004080:	ee10 3a10 	vmov	r3, s0
 8004084:	b507      	push	{r0, r1, r2, lr}
 8004086:	4a1f      	ldr	r2, [pc, #124]	@ (8004104 <sinf+0x84>)
 8004088:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800408c:	4293      	cmp	r3, r2
 800408e:	d807      	bhi.n	80040a0 <sinf+0x20>
 8004090:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8004108 <sinf+0x88>
 8004094:	2000      	movs	r0, #0
 8004096:	b003      	add	sp, #12
 8004098:	f85d eb04 	ldr.w	lr, [sp], #4
 800409c:	f000 b8e8 	b.w	8004270 <__kernel_sinf>
 80040a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80040a4:	d304      	bcc.n	80040b0 <sinf+0x30>
 80040a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80040aa:	b003      	add	sp, #12
 80040ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80040b0:	4668      	mov	r0, sp
 80040b2:	f000 f925 	bl	8004300 <__ieee754_rem_pio2f>
 80040b6:	f000 0003 	and.w	r0, r0, #3
 80040ba:	2801      	cmp	r0, #1
 80040bc:	d00a      	beq.n	80040d4 <sinf+0x54>
 80040be:	2802      	cmp	r0, #2
 80040c0:	d00f      	beq.n	80040e2 <sinf+0x62>
 80040c2:	b9c0      	cbnz	r0, 80040f6 <sinf+0x76>
 80040c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80040c8:	ed9d 0a00 	vldr	s0, [sp]
 80040cc:	2001      	movs	r0, #1
 80040ce:	f000 f8cf 	bl	8004270 <__kernel_sinf>
 80040d2:	e7ea      	b.n	80040aa <sinf+0x2a>
 80040d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80040d8:	ed9d 0a00 	vldr	s0, [sp]
 80040dc:	f000 f870 	bl	80041c0 <__kernel_cosf>
 80040e0:	e7e3      	b.n	80040aa <sinf+0x2a>
 80040e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80040e6:	ed9d 0a00 	vldr	s0, [sp]
 80040ea:	2001      	movs	r0, #1
 80040ec:	f000 f8c0 	bl	8004270 <__kernel_sinf>
 80040f0:	eeb1 0a40 	vneg.f32	s0, s0
 80040f4:	e7d9      	b.n	80040aa <sinf+0x2a>
 80040f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80040fa:	ed9d 0a00 	vldr	s0, [sp]
 80040fe:	f000 f85f 	bl	80041c0 <__kernel_cosf>
 8004102:	e7f5      	b.n	80040f0 <sinf+0x70>
 8004104:	3f490fd8 	.word	0x3f490fd8
 8004108:	00000000 	.word	0x00000000

0800410c <fmaxf>:
 800410c:	b508      	push	{r3, lr}
 800410e:	ed2d 8b02 	vpush	{d8}
 8004112:	eeb0 8a40 	vmov.f32	s16, s0
 8004116:	eef0 8a60 	vmov.f32	s17, s1
 800411a:	f000 f831 	bl	8004180 <__fpclassifyf>
 800411e:	b930      	cbnz	r0, 800412e <fmaxf+0x22>
 8004120:	eeb0 8a68 	vmov.f32	s16, s17
 8004124:	eeb0 0a48 	vmov.f32	s0, s16
 8004128:	ecbd 8b02 	vpop	{d8}
 800412c:	bd08      	pop	{r3, pc}
 800412e:	eeb0 0a68 	vmov.f32	s0, s17
 8004132:	f000 f825 	bl	8004180 <__fpclassifyf>
 8004136:	2800      	cmp	r0, #0
 8004138:	d0f4      	beq.n	8004124 <fmaxf+0x18>
 800413a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800413e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004142:	dded      	ble.n	8004120 <fmaxf+0x14>
 8004144:	e7ee      	b.n	8004124 <fmaxf+0x18>

08004146 <fminf>:
 8004146:	b508      	push	{r3, lr}
 8004148:	ed2d 8b02 	vpush	{d8}
 800414c:	eeb0 8a40 	vmov.f32	s16, s0
 8004150:	eef0 8a60 	vmov.f32	s17, s1
 8004154:	f000 f814 	bl	8004180 <__fpclassifyf>
 8004158:	b930      	cbnz	r0, 8004168 <fminf+0x22>
 800415a:	eeb0 8a68 	vmov.f32	s16, s17
 800415e:	eeb0 0a48 	vmov.f32	s0, s16
 8004162:	ecbd 8b02 	vpop	{d8}
 8004166:	bd08      	pop	{r3, pc}
 8004168:	eeb0 0a68 	vmov.f32	s0, s17
 800416c:	f000 f808 	bl	8004180 <__fpclassifyf>
 8004170:	2800      	cmp	r0, #0
 8004172:	d0f4      	beq.n	800415e <fminf+0x18>
 8004174:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417c:	d5ed      	bpl.n	800415a <fminf+0x14>
 800417e:	e7ee      	b.n	800415e <fminf+0x18>

08004180 <__fpclassifyf>:
 8004180:	ee10 3a10 	vmov	r3, s0
 8004184:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8004188:	d00d      	beq.n	80041a6 <__fpclassifyf+0x26>
 800418a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800418e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8004192:	d30a      	bcc.n	80041aa <__fpclassifyf+0x2a>
 8004194:	4b07      	ldr	r3, [pc, #28]	@ (80041b4 <__fpclassifyf+0x34>)
 8004196:	1e42      	subs	r2, r0, #1
 8004198:	429a      	cmp	r2, r3
 800419a:	d908      	bls.n	80041ae <__fpclassifyf+0x2e>
 800419c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80041a0:	4258      	negs	r0, r3
 80041a2:	4158      	adcs	r0, r3
 80041a4:	4770      	bx	lr
 80041a6:	2002      	movs	r0, #2
 80041a8:	4770      	bx	lr
 80041aa:	2004      	movs	r0, #4
 80041ac:	4770      	bx	lr
 80041ae:	2003      	movs	r0, #3
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	007ffffe 	.word	0x007ffffe

080041b8 <__ieee754_sqrtf>:
 80041b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80041bc:	4770      	bx	lr
	...

080041c0 <__kernel_cosf>:
 80041c0:	ee10 3a10 	vmov	r3, s0
 80041c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041c8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80041cc:	eef0 6a40 	vmov.f32	s13, s0
 80041d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80041d4:	d204      	bcs.n	80041e0 <__kernel_cosf+0x20>
 80041d6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80041da:	ee17 2a90 	vmov	r2, s15
 80041de:	b342      	cbz	r2, 8004232 <__kernel_cosf+0x72>
 80041e0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80041e4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8004250 <__kernel_cosf+0x90>
 80041e8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8004254 <__kernel_cosf+0x94>
 80041ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004258 <__kernel_cosf+0x98>)
 80041ee:	eea7 6a27 	vfma.f32	s12, s14, s15
 80041f2:	4293      	cmp	r3, r2
 80041f4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800425c <__kernel_cosf+0x9c>
 80041f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80041fc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8004260 <__kernel_cosf+0xa0>
 8004200:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004204:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004264 <__kernel_cosf+0xa4>
 8004208:	eee6 7a07 	vfma.f32	s15, s12, s14
 800420c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8004268 <__kernel_cosf+0xa8>
 8004210:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004214:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8004218:	ee26 6a07 	vmul.f32	s12, s12, s14
 800421c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004220:	eee7 0a06 	vfma.f32	s1, s14, s12
 8004224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004228:	d804      	bhi.n	8004234 <__kernel_cosf+0x74>
 800422a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800422e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004232:	4770      	bx	lr
 8004234:	4a0d      	ldr	r2, [pc, #52]	@ (800426c <__kernel_cosf+0xac>)
 8004236:	4293      	cmp	r3, r2
 8004238:	bf9a      	itte	ls
 800423a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800423e:	ee07 3a10 	vmovls	s14, r3
 8004242:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8004246:	ee30 0a47 	vsub.f32	s0, s0, s14
 800424a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800424e:	e7ec      	b.n	800422a <__kernel_cosf+0x6a>
 8004250:	ad47d74e 	.word	0xad47d74e
 8004254:	310f74f6 	.word	0x310f74f6
 8004258:	3e999999 	.word	0x3e999999
 800425c:	b493f27c 	.word	0xb493f27c
 8004260:	37d00d01 	.word	0x37d00d01
 8004264:	bab60b61 	.word	0xbab60b61
 8004268:	3d2aaaab 	.word	0x3d2aaaab
 800426c:	3f480000 	.word	0x3f480000

08004270 <__kernel_sinf>:
 8004270:	ee10 3a10 	vmov	r3, s0
 8004274:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004278:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800427c:	d204      	bcs.n	8004288 <__kernel_sinf+0x18>
 800427e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004282:	ee17 3a90 	vmov	r3, s15
 8004286:	b35b      	cbz	r3, 80042e0 <__kernel_sinf+0x70>
 8004288:	ee20 7a00 	vmul.f32	s14, s0, s0
 800428c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80042e4 <__kernel_sinf+0x74>
 8004290:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80042e8 <__kernel_sinf+0x78>
 8004294:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004298:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80042ec <__kernel_sinf+0x7c>
 800429c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80042a0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80042f0 <__kernel_sinf+0x80>
 80042a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80042a8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80042f4 <__kernel_sinf+0x84>
 80042ac:	ee60 6a07 	vmul.f32	s13, s0, s14
 80042b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80042b4:	b930      	cbnz	r0, 80042c4 <__kernel_sinf+0x54>
 80042b6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80042f8 <__kernel_sinf+0x88>
 80042ba:	eea7 6a27 	vfma.f32	s12, s14, s15
 80042be:	eea6 0a26 	vfma.f32	s0, s12, s13
 80042c2:	4770      	bx	lr
 80042c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80042c8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80042cc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80042d0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80042d4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80042fc <__kernel_sinf+0x8c>
 80042d8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80042dc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	2f2ec9d3 	.word	0x2f2ec9d3
 80042e8:	b2d72f34 	.word	0xb2d72f34
 80042ec:	3638ef1b 	.word	0x3638ef1b
 80042f0:	b9500d01 	.word	0xb9500d01
 80042f4:	3c088889 	.word	0x3c088889
 80042f8:	be2aaaab 	.word	0xbe2aaaab
 80042fc:	3e2aaaab 	.word	0x3e2aaaab

08004300 <__ieee754_rem_pio2f>:
 8004300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004302:	ee10 6a10 	vmov	r6, s0
 8004306:	4b88      	ldr	r3, [pc, #544]	@ (8004528 <__ieee754_rem_pio2f+0x228>)
 8004308:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800430c:	429d      	cmp	r5, r3
 800430e:	b087      	sub	sp, #28
 8004310:	4604      	mov	r4, r0
 8004312:	d805      	bhi.n	8004320 <__ieee754_rem_pio2f+0x20>
 8004314:	2300      	movs	r3, #0
 8004316:	ed80 0a00 	vstr	s0, [r0]
 800431a:	6043      	str	r3, [r0, #4]
 800431c:	2000      	movs	r0, #0
 800431e:	e022      	b.n	8004366 <__ieee754_rem_pio2f+0x66>
 8004320:	4b82      	ldr	r3, [pc, #520]	@ (800452c <__ieee754_rem_pio2f+0x22c>)
 8004322:	429d      	cmp	r5, r3
 8004324:	d83a      	bhi.n	800439c <__ieee754_rem_pio2f+0x9c>
 8004326:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800432a:	2e00      	cmp	r6, #0
 800432c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004530 <__ieee754_rem_pio2f+0x230>
 8004330:	4a80      	ldr	r2, [pc, #512]	@ (8004534 <__ieee754_rem_pio2f+0x234>)
 8004332:	f023 030f 	bic.w	r3, r3, #15
 8004336:	dd18      	ble.n	800436a <__ieee754_rem_pio2f+0x6a>
 8004338:	4293      	cmp	r3, r2
 800433a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800433e:	bf09      	itett	eq
 8004340:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8004538 <__ieee754_rem_pio2f+0x238>
 8004344:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800453c <__ieee754_rem_pio2f+0x23c>
 8004348:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8004540 <__ieee754_rem_pio2f+0x240>
 800434c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004350:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8004354:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004358:	ed80 7a00 	vstr	s14, [r0]
 800435c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004360:	edc0 7a01 	vstr	s15, [r0, #4]
 8004364:	2001      	movs	r0, #1
 8004366:	b007      	add	sp, #28
 8004368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800436a:	4293      	cmp	r3, r2
 800436c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004370:	bf09      	itett	eq
 8004372:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8004538 <__ieee754_rem_pio2f+0x238>
 8004376:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800453c <__ieee754_rem_pio2f+0x23c>
 800437a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8004540 <__ieee754_rem_pio2f+0x240>
 800437e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004382:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004386:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800438a:	ed80 7a00 	vstr	s14, [r0]
 800438e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004392:	edc0 7a01 	vstr	s15, [r0, #4]
 8004396:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800439a:	e7e4      	b.n	8004366 <__ieee754_rem_pio2f+0x66>
 800439c:	4b69      	ldr	r3, [pc, #420]	@ (8004544 <__ieee754_rem_pio2f+0x244>)
 800439e:	429d      	cmp	r5, r3
 80043a0:	d873      	bhi.n	800448a <__ieee754_rem_pio2f+0x18a>
 80043a2:	f000 f8dd 	bl	8004560 <fabsf>
 80043a6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8004548 <__ieee754_rem_pio2f+0x248>
 80043aa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80043ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 80043b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043ba:	ee17 0a90 	vmov	r0, s15
 80043be:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004530 <__ieee754_rem_pio2f+0x230>
 80043c2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80043c6:	281f      	cmp	r0, #31
 80043c8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800453c <__ieee754_rem_pio2f+0x23c>
 80043cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d0:	eeb1 6a47 	vneg.f32	s12, s14
 80043d4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80043d8:	ee16 1a90 	vmov	r1, s13
 80043dc:	dc09      	bgt.n	80043f2 <__ieee754_rem_pio2f+0xf2>
 80043de:	4a5b      	ldr	r2, [pc, #364]	@ (800454c <__ieee754_rem_pio2f+0x24c>)
 80043e0:	1e47      	subs	r7, r0, #1
 80043e2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80043e6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80043ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d107      	bne.n	8004402 <__ieee754_rem_pio2f+0x102>
 80043f2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80043f6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80043fa:	2a08      	cmp	r2, #8
 80043fc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8004400:	dc14      	bgt.n	800442c <__ieee754_rem_pio2f+0x12c>
 8004402:	6021      	str	r1, [r4, #0]
 8004404:	ed94 7a00 	vldr	s14, [r4]
 8004408:	ee30 0a47 	vsub.f32	s0, s0, s14
 800440c:	2e00      	cmp	r6, #0
 800440e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004412:	ed84 0a01 	vstr	s0, [r4, #4]
 8004416:	daa6      	bge.n	8004366 <__ieee754_rem_pio2f+0x66>
 8004418:	eeb1 7a47 	vneg.f32	s14, s14
 800441c:	eeb1 0a40 	vneg.f32	s0, s0
 8004420:	ed84 7a00 	vstr	s14, [r4]
 8004424:	ed84 0a01 	vstr	s0, [r4, #4]
 8004428:	4240      	negs	r0, r0
 800442a:	e79c      	b.n	8004366 <__ieee754_rem_pio2f+0x66>
 800442c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8004538 <__ieee754_rem_pio2f+0x238>
 8004430:	eef0 6a40 	vmov.f32	s13, s0
 8004434:	eee6 6a25 	vfma.f32	s13, s12, s11
 8004438:	ee70 7a66 	vsub.f32	s15, s0, s13
 800443c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004440:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004540 <__ieee754_rem_pio2f+0x240>
 8004444:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8004448:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800444c:	ee15 2a90 	vmov	r2, s11
 8004450:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004454:	1a5b      	subs	r3, r3, r1
 8004456:	2b19      	cmp	r3, #25
 8004458:	dc04      	bgt.n	8004464 <__ieee754_rem_pio2f+0x164>
 800445a:	edc4 5a00 	vstr	s11, [r4]
 800445e:	eeb0 0a66 	vmov.f32	s0, s13
 8004462:	e7cf      	b.n	8004404 <__ieee754_rem_pio2f+0x104>
 8004464:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8004550 <__ieee754_rem_pio2f+0x250>
 8004468:	eeb0 0a66 	vmov.f32	s0, s13
 800446c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004470:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004474:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004554 <__ieee754_rem_pio2f+0x254>
 8004478:	eee6 7a25 	vfma.f32	s15, s12, s11
 800447c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004480:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004484:	ed84 7a00 	vstr	s14, [r4]
 8004488:	e7bc      	b.n	8004404 <__ieee754_rem_pio2f+0x104>
 800448a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800448e:	d306      	bcc.n	800449e <__ieee754_rem_pio2f+0x19e>
 8004490:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004494:	edc0 7a01 	vstr	s15, [r0, #4]
 8004498:	edc0 7a00 	vstr	s15, [r0]
 800449c:	e73e      	b.n	800431c <__ieee754_rem_pio2f+0x1c>
 800449e:	15ea      	asrs	r2, r5, #23
 80044a0:	3a86      	subs	r2, #134	@ 0x86
 80044a2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80044ae:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8004558 <__ieee754_rem_pio2f+0x258>
 80044b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80044b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044ba:	ed8d 7a03 	vstr	s14, [sp, #12]
 80044be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80044c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80044c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80044ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044ce:	ed8d 7a04 	vstr	s14, [sp, #16]
 80044d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80044d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044de:	edcd 7a05 	vstr	s15, [sp, #20]
 80044e2:	d11e      	bne.n	8004522 <__ieee754_rem_pio2f+0x222>
 80044e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80044e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ec:	bf0c      	ite	eq
 80044ee:	2301      	moveq	r3, #1
 80044f0:	2302      	movne	r3, #2
 80044f2:	491a      	ldr	r1, [pc, #104]	@ (800455c <__ieee754_rem_pio2f+0x25c>)
 80044f4:	9101      	str	r1, [sp, #4]
 80044f6:	2102      	movs	r1, #2
 80044f8:	9100      	str	r1, [sp, #0]
 80044fa:	a803      	add	r0, sp, #12
 80044fc:	4621      	mov	r1, r4
 80044fe:	f000 f837 	bl	8004570 <__kernel_rem_pio2f>
 8004502:	2e00      	cmp	r6, #0
 8004504:	f6bf af2f 	bge.w	8004366 <__ieee754_rem_pio2f+0x66>
 8004508:	edd4 7a00 	vldr	s15, [r4]
 800450c:	eef1 7a67 	vneg.f32	s15, s15
 8004510:	edc4 7a00 	vstr	s15, [r4]
 8004514:	edd4 7a01 	vldr	s15, [r4, #4]
 8004518:	eef1 7a67 	vneg.f32	s15, s15
 800451c:	edc4 7a01 	vstr	s15, [r4, #4]
 8004520:	e782      	b.n	8004428 <__ieee754_rem_pio2f+0x128>
 8004522:	2303      	movs	r3, #3
 8004524:	e7e5      	b.n	80044f2 <__ieee754_rem_pio2f+0x1f2>
 8004526:	bf00      	nop
 8004528:	3f490fd8 	.word	0x3f490fd8
 800452c:	4016cbe3 	.word	0x4016cbe3
 8004530:	3fc90f80 	.word	0x3fc90f80
 8004534:	3fc90fd0 	.word	0x3fc90fd0
 8004538:	37354400 	.word	0x37354400
 800453c:	37354443 	.word	0x37354443
 8004540:	2e85a308 	.word	0x2e85a308
 8004544:	43490f80 	.word	0x43490f80
 8004548:	3f22f984 	.word	0x3f22f984
 800454c:	08004efc 	.word	0x08004efc
 8004550:	2e85a300 	.word	0x2e85a300
 8004554:	248d3132 	.word	0x248d3132
 8004558:	43800000 	.word	0x43800000
 800455c:	08004f7c 	.word	0x08004f7c

08004560 <fabsf>:
 8004560:	ee10 3a10 	vmov	r3, s0
 8004564:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004568:	ee00 3a10 	vmov	s0, r3
 800456c:	4770      	bx	lr
	...

08004570 <__kernel_rem_pio2f>:
 8004570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004574:	ed2d 8b04 	vpush	{d8-d9}
 8004578:	b0d9      	sub	sp, #356	@ 0x164
 800457a:	4690      	mov	r8, r2
 800457c:	9001      	str	r0, [sp, #4]
 800457e:	4ab9      	ldr	r2, [pc, #740]	@ (8004864 <__kernel_rem_pio2f+0x2f4>)
 8004580:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8004582:	f118 0f04 	cmn.w	r8, #4
 8004586:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800458a:	460f      	mov	r7, r1
 800458c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8004590:	db27      	blt.n	80045e2 <__kernel_rem_pio2f+0x72>
 8004592:	f1b8 0203 	subs.w	r2, r8, #3
 8004596:	bf48      	it	mi
 8004598:	f108 0204 	addmi.w	r2, r8, #4
 800459c:	10d2      	asrs	r2, r2, #3
 800459e:	1c55      	adds	r5, r2, #1
 80045a0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80045a2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8004874 <__kernel_rem_pio2f+0x304>
 80045a6:	00e8      	lsls	r0, r5, #3
 80045a8:	eba2 060b 	sub.w	r6, r2, fp
 80045ac:	9002      	str	r0, [sp, #8]
 80045ae:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80045b2:	eb0a 0c0b 	add.w	ip, sl, fp
 80045b6:	ac1c      	add	r4, sp, #112	@ 0x70
 80045b8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80045bc:	2000      	movs	r0, #0
 80045be:	4560      	cmp	r0, ip
 80045c0:	dd11      	ble.n	80045e6 <__kernel_rem_pio2f+0x76>
 80045c2:	a91c      	add	r1, sp, #112	@ 0x70
 80045c4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80045c8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80045cc:	f04f 0c00 	mov.w	ip, #0
 80045d0:	45d4      	cmp	ip, sl
 80045d2:	dc27      	bgt.n	8004624 <__kernel_rem_pio2f+0xb4>
 80045d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80045d8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8004874 <__kernel_rem_pio2f+0x304>
 80045dc:	4606      	mov	r6, r0
 80045de:	2400      	movs	r4, #0
 80045e0:	e016      	b.n	8004610 <__kernel_rem_pio2f+0xa0>
 80045e2:	2200      	movs	r2, #0
 80045e4:	e7db      	b.n	800459e <__kernel_rem_pio2f+0x2e>
 80045e6:	42c6      	cmn	r6, r0
 80045e8:	bf5d      	ittte	pl
 80045ea:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80045ee:	ee07 1a90 	vmovpl	s15, r1
 80045f2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80045f6:	eef0 7a47 	vmovmi.f32	s15, s14
 80045fa:	ece4 7a01 	vstmia	r4!, {s15}
 80045fe:	3001      	adds	r0, #1
 8004600:	e7dd      	b.n	80045be <__kernel_rem_pio2f+0x4e>
 8004602:	ecfe 6a01 	vldmia	lr!, {s13}
 8004606:	ed96 7a00 	vldr	s14, [r6]
 800460a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800460e:	3401      	adds	r4, #1
 8004610:	455c      	cmp	r4, fp
 8004612:	f1a6 0604 	sub.w	r6, r6, #4
 8004616:	ddf4      	ble.n	8004602 <__kernel_rem_pio2f+0x92>
 8004618:	ece9 7a01 	vstmia	r9!, {s15}
 800461c:	f10c 0c01 	add.w	ip, ip, #1
 8004620:	3004      	adds	r0, #4
 8004622:	e7d5      	b.n	80045d0 <__kernel_rem_pio2f+0x60>
 8004624:	a908      	add	r1, sp, #32
 8004626:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800462a:	9104      	str	r1, [sp, #16]
 800462c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800462e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8004870 <__kernel_rem_pio2f+0x300>
 8004632:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800486c <__kernel_rem_pio2f+0x2fc>
 8004636:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800463a:	9203      	str	r2, [sp, #12]
 800463c:	4654      	mov	r4, sl
 800463e:	00a2      	lsls	r2, r4, #2
 8004640:	9205      	str	r2, [sp, #20]
 8004642:	aa58      	add	r2, sp, #352	@ 0x160
 8004644:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004648:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800464c:	a944      	add	r1, sp, #272	@ 0x110
 800464e:	aa08      	add	r2, sp, #32
 8004650:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004654:	4694      	mov	ip, r2
 8004656:	4626      	mov	r6, r4
 8004658:	2e00      	cmp	r6, #0
 800465a:	f1a0 0004 	sub.w	r0, r0, #4
 800465e:	dc4c      	bgt.n	80046fa <__kernel_rem_pio2f+0x18a>
 8004660:	4628      	mov	r0, r5
 8004662:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004666:	f000 f9f5 	bl	8004a54 <scalbnf>
 800466a:	eeb0 8a40 	vmov.f32	s16, s0
 800466e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8004672:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004676:	f000 fa53 	bl	8004b20 <floorf>
 800467a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800467e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004682:	2d00      	cmp	r5, #0
 8004684:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004688:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800468c:	ee17 9a90 	vmov	r9, s15
 8004690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004694:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004698:	dd41      	ble.n	800471e <__kernel_rem_pio2f+0x1ae>
 800469a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800469e:	a908      	add	r1, sp, #32
 80046a0:	f1c5 0e08 	rsb	lr, r5, #8
 80046a4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80046a8:	fa46 f00e 	asr.w	r0, r6, lr
 80046ac:	4481      	add	r9, r0
 80046ae:	fa00 f00e 	lsl.w	r0, r0, lr
 80046b2:	1a36      	subs	r6, r6, r0
 80046b4:	f1c5 0007 	rsb	r0, r5, #7
 80046b8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80046bc:	4106      	asrs	r6, r0
 80046be:	2e00      	cmp	r6, #0
 80046c0:	dd3c      	ble.n	800473c <__kernel_rem_pio2f+0x1cc>
 80046c2:	f04f 0e00 	mov.w	lr, #0
 80046c6:	f109 0901 	add.w	r9, r9, #1
 80046ca:	4670      	mov	r0, lr
 80046cc:	4574      	cmp	r4, lr
 80046ce:	dc68      	bgt.n	80047a2 <__kernel_rem_pio2f+0x232>
 80046d0:	2d00      	cmp	r5, #0
 80046d2:	dd03      	ble.n	80046dc <__kernel_rem_pio2f+0x16c>
 80046d4:	2d01      	cmp	r5, #1
 80046d6:	d074      	beq.n	80047c2 <__kernel_rem_pio2f+0x252>
 80046d8:	2d02      	cmp	r5, #2
 80046da:	d07d      	beq.n	80047d8 <__kernel_rem_pio2f+0x268>
 80046dc:	2e02      	cmp	r6, #2
 80046de:	d12d      	bne.n	800473c <__kernel_rem_pio2f+0x1cc>
 80046e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80046e4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80046e8:	b340      	cbz	r0, 800473c <__kernel_rem_pio2f+0x1cc>
 80046ea:	4628      	mov	r0, r5
 80046ec:	9306      	str	r3, [sp, #24]
 80046ee:	f000 f9b1 	bl	8004a54 <scalbnf>
 80046f2:	9b06      	ldr	r3, [sp, #24]
 80046f4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80046f8:	e020      	b.n	800473c <__kernel_rem_pio2f+0x1cc>
 80046fa:	ee60 7a28 	vmul.f32	s15, s0, s17
 80046fe:	3e01      	subs	r6, #1
 8004700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004708:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800470c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004710:	ecac 0a01 	vstmia	ip!, {s0}
 8004714:	ed90 0a00 	vldr	s0, [r0]
 8004718:	ee37 0a80 	vadd.f32	s0, s15, s0
 800471c:	e79c      	b.n	8004658 <__kernel_rem_pio2f+0xe8>
 800471e:	d105      	bne.n	800472c <__kernel_rem_pio2f+0x1bc>
 8004720:	1e60      	subs	r0, r4, #1
 8004722:	a908      	add	r1, sp, #32
 8004724:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8004728:	11f6      	asrs	r6, r6, #7
 800472a:	e7c8      	b.n	80046be <__kernel_rem_pio2f+0x14e>
 800472c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004730:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004738:	da31      	bge.n	800479e <__kernel_rem_pio2f+0x22e>
 800473a:	2600      	movs	r6, #0
 800473c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004744:	f040 8098 	bne.w	8004878 <__kernel_rem_pio2f+0x308>
 8004748:	1e60      	subs	r0, r4, #1
 800474a:	2200      	movs	r2, #0
 800474c:	4550      	cmp	r0, sl
 800474e:	da4b      	bge.n	80047e8 <__kernel_rem_pio2f+0x278>
 8004750:	2a00      	cmp	r2, #0
 8004752:	d065      	beq.n	8004820 <__kernel_rem_pio2f+0x2b0>
 8004754:	3c01      	subs	r4, #1
 8004756:	ab08      	add	r3, sp, #32
 8004758:	3d08      	subs	r5, #8
 800475a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f8      	beq.n	8004754 <__kernel_rem_pio2f+0x1e4>
 8004762:	4628      	mov	r0, r5
 8004764:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004768:	f000 f974 	bl	8004a54 <scalbnf>
 800476c:	1c63      	adds	r3, r4, #1
 800476e:	aa44      	add	r2, sp, #272	@ 0x110
 8004770:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004870 <__kernel_rem_pio2f+0x300>
 8004774:	0099      	lsls	r1, r3, #2
 8004776:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800477a:	4623      	mov	r3, r4
 800477c:	2b00      	cmp	r3, #0
 800477e:	f280 80a9 	bge.w	80048d4 <__kernel_rem_pio2f+0x364>
 8004782:	4623      	mov	r3, r4
 8004784:	2b00      	cmp	r3, #0
 8004786:	f2c0 80c7 	blt.w	8004918 <__kernel_rem_pio2f+0x3a8>
 800478a:	aa44      	add	r2, sp, #272	@ 0x110
 800478c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8004790:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8004868 <__kernel_rem_pio2f+0x2f8>
 8004794:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8004874 <__kernel_rem_pio2f+0x304>
 8004798:	2000      	movs	r0, #0
 800479a:	1ae2      	subs	r2, r4, r3
 800479c:	e0b1      	b.n	8004902 <__kernel_rem_pio2f+0x392>
 800479e:	2602      	movs	r6, #2
 80047a0:	e78f      	b.n	80046c2 <__kernel_rem_pio2f+0x152>
 80047a2:	f852 1b04 	ldr.w	r1, [r2], #4
 80047a6:	b948      	cbnz	r0, 80047bc <__kernel_rem_pio2f+0x24c>
 80047a8:	b121      	cbz	r1, 80047b4 <__kernel_rem_pio2f+0x244>
 80047aa:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80047ae:	f842 1c04 	str.w	r1, [r2, #-4]
 80047b2:	2101      	movs	r1, #1
 80047b4:	f10e 0e01 	add.w	lr, lr, #1
 80047b8:	4608      	mov	r0, r1
 80047ba:	e787      	b.n	80046cc <__kernel_rem_pio2f+0x15c>
 80047bc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80047c0:	e7f5      	b.n	80047ae <__kernel_rem_pio2f+0x23e>
 80047c2:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80047c6:	aa08      	add	r2, sp, #32
 80047c8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80047cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047d0:	a908      	add	r1, sp, #32
 80047d2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80047d6:	e781      	b.n	80046dc <__kernel_rem_pio2f+0x16c>
 80047d8:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80047dc:	aa08      	add	r2, sp, #32
 80047de:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80047e2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80047e6:	e7f3      	b.n	80047d0 <__kernel_rem_pio2f+0x260>
 80047e8:	a908      	add	r1, sp, #32
 80047ea:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80047ee:	3801      	subs	r0, #1
 80047f0:	430a      	orrs	r2, r1
 80047f2:	e7ab      	b.n	800474c <__kernel_rem_pio2f+0x1dc>
 80047f4:	3201      	adds	r2, #1
 80047f6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80047fa:	2e00      	cmp	r6, #0
 80047fc:	d0fa      	beq.n	80047f4 <__kernel_rem_pio2f+0x284>
 80047fe:	9905      	ldr	r1, [sp, #20]
 8004800:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8004804:	eb0d 0001 	add.w	r0, sp, r1
 8004808:	18e6      	adds	r6, r4, r3
 800480a:	a91c      	add	r1, sp, #112	@ 0x70
 800480c:	f104 0c01 	add.w	ip, r4, #1
 8004810:	384c      	subs	r0, #76	@ 0x4c
 8004812:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004816:	4422      	add	r2, r4
 8004818:	4562      	cmp	r2, ip
 800481a:	da04      	bge.n	8004826 <__kernel_rem_pio2f+0x2b6>
 800481c:	4614      	mov	r4, r2
 800481e:	e70e      	b.n	800463e <__kernel_rem_pio2f+0xce>
 8004820:	9804      	ldr	r0, [sp, #16]
 8004822:	2201      	movs	r2, #1
 8004824:	e7e7      	b.n	80047f6 <__kernel_rem_pio2f+0x286>
 8004826:	9903      	ldr	r1, [sp, #12]
 8004828:	f8dd e004 	ldr.w	lr, [sp, #4]
 800482c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8004830:	9105      	str	r1, [sp, #20]
 8004832:	ee07 1a90 	vmov	s15, r1
 8004836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800483a:	2400      	movs	r4, #0
 800483c:	ece6 7a01 	vstmia	r6!, {s15}
 8004840:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8004874 <__kernel_rem_pio2f+0x304>
 8004844:	46b1      	mov	r9, r6
 8004846:	455c      	cmp	r4, fp
 8004848:	dd04      	ble.n	8004854 <__kernel_rem_pio2f+0x2e4>
 800484a:	ece0 7a01 	vstmia	r0!, {s15}
 800484e:	f10c 0c01 	add.w	ip, ip, #1
 8004852:	e7e1      	b.n	8004818 <__kernel_rem_pio2f+0x2a8>
 8004854:	ecfe 6a01 	vldmia	lr!, {s13}
 8004858:	ed39 7a01 	vldmdb	r9!, {s14}
 800485c:	3401      	adds	r4, #1
 800485e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004862:	e7f0      	b.n	8004846 <__kernel_rem_pio2f+0x2d6>
 8004864:	080052c0 	.word	0x080052c0
 8004868:	08005294 	.word	0x08005294
 800486c:	43800000 	.word	0x43800000
 8004870:	3b800000 	.word	0x3b800000
 8004874:	00000000 	.word	0x00000000
 8004878:	9b02      	ldr	r3, [sp, #8]
 800487a:	eeb0 0a48 	vmov.f32	s0, s16
 800487e:	eba3 0008 	sub.w	r0, r3, r8
 8004882:	f000 f8e7 	bl	8004a54 <scalbnf>
 8004886:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800486c <__kernel_rem_pio2f+0x2fc>
 800488a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800488e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004892:	db19      	blt.n	80048c8 <__kernel_rem_pio2f+0x358>
 8004894:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8004870 <__kernel_rem_pio2f+0x300>
 8004898:	ee60 7a27 	vmul.f32	s15, s0, s15
 800489c:	aa08      	add	r2, sp, #32
 800489e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048a2:	3508      	adds	r5, #8
 80048a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048a8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80048ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80048b4:	ee10 3a10 	vmov	r3, s0
 80048b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80048bc:	ee17 3a90 	vmov	r3, s15
 80048c0:	3401      	adds	r4, #1
 80048c2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80048c6:	e74c      	b.n	8004762 <__kernel_rem_pio2f+0x1f2>
 80048c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80048cc:	aa08      	add	r2, sp, #32
 80048ce:	ee10 3a10 	vmov	r3, s0
 80048d2:	e7f6      	b.n	80048c2 <__kernel_rem_pio2f+0x352>
 80048d4:	a808      	add	r0, sp, #32
 80048d6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80048da:	9001      	str	r0, [sp, #4]
 80048dc:	ee07 0a90 	vmov	s15, r0
 80048e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048e4:	3b01      	subs	r3, #1
 80048e6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80048ea:	ee20 0a07 	vmul.f32	s0, s0, s14
 80048ee:	ed62 7a01 	vstmdb	r2!, {s15}
 80048f2:	e743      	b.n	800477c <__kernel_rem_pio2f+0x20c>
 80048f4:	ecfc 6a01 	vldmia	ip!, {s13}
 80048f8:	ecb5 7a01 	vldmia	r5!, {s14}
 80048fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004900:	3001      	adds	r0, #1
 8004902:	4550      	cmp	r0, sl
 8004904:	dc01      	bgt.n	800490a <__kernel_rem_pio2f+0x39a>
 8004906:	4282      	cmp	r2, r0
 8004908:	daf4      	bge.n	80048f4 <__kernel_rem_pio2f+0x384>
 800490a:	a858      	add	r0, sp, #352	@ 0x160
 800490c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004910:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8004914:	3b01      	subs	r3, #1
 8004916:	e735      	b.n	8004784 <__kernel_rem_pio2f+0x214>
 8004918:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800491a:	2b02      	cmp	r3, #2
 800491c:	dc09      	bgt.n	8004932 <__kernel_rem_pio2f+0x3c2>
 800491e:	2b00      	cmp	r3, #0
 8004920:	dc2b      	bgt.n	800497a <__kernel_rem_pio2f+0x40a>
 8004922:	d044      	beq.n	80049ae <__kernel_rem_pio2f+0x43e>
 8004924:	f009 0007 	and.w	r0, r9, #7
 8004928:	b059      	add	sp, #356	@ 0x164
 800492a:	ecbd 8b04 	vpop	{d8-d9}
 800492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004932:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004934:	2b03      	cmp	r3, #3
 8004936:	d1f5      	bne.n	8004924 <__kernel_rem_pio2f+0x3b4>
 8004938:	aa30      	add	r2, sp, #192	@ 0xc0
 800493a:	1f0b      	subs	r3, r1, #4
 800493c:	4413      	add	r3, r2
 800493e:	461a      	mov	r2, r3
 8004940:	4620      	mov	r0, r4
 8004942:	2800      	cmp	r0, #0
 8004944:	f1a2 0204 	sub.w	r2, r2, #4
 8004948:	dc52      	bgt.n	80049f0 <__kernel_rem_pio2f+0x480>
 800494a:	4622      	mov	r2, r4
 800494c:	2a01      	cmp	r2, #1
 800494e:	f1a3 0304 	sub.w	r3, r3, #4
 8004952:	dc5d      	bgt.n	8004a10 <__kernel_rem_pio2f+0x4a0>
 8004954:	ab30      	add	r3, sp, #192	@ 0xc0
 8004956:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8004874 <__kernel_rem_pio2f+0x304>
 800495a:	440b      	add	r3, r1
 800495c:	2c01      	cmp	r4, #1
 800495e:	dc67      	bgt.n	8004a30 <__kernel_rem_pio2f+0x4c0>
 8004960:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8004964:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8004968:	2e00      	cmp	r6, #0
 800496a:	d167      	bne.n	8004a3c <__kernel_rem_pio2f+0x4cc>
 800496c:	edc7 6a00 	vstr	s13, [r7]
 8004970:	ed87 7a01 	vstr	s14, [r7, #4]
 8004974:	edc7 7a02 	vstr	s15, [r7, #8]
 8004978:	e7d4      	b.n	8004924 <__kernel_rem_pio2f+0x3b4>
 800497a:	ab30      	add	r3, sp, #192	@ 0xc0
 800497c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8004874 <__kernel_rem_pio2f+0x304>
 8004980:	440b      	add	r3, r1
 8004982:	4622      	mov	r2, r4
 8004984:	2a00      	cmp	r2, #0
 8004986:	da24      	bge.n	80049d2 <__kernel_rem_pio2f+0x462>
 8004988:	b34e      	cbz	r6, 80049de <__kernel_rem_pio2f+0x46e>
 800498a:	eef1 7a47 	vneg.f32	s15, s14
 800498e:	edc7 7a00 	vstr	s15, [r7]
 8004992:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8004996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800499a:	aa31      	add	r2, sp, #196	@ 0xc4
 800499c:	2301      	movs	r3, #1
 800499e:	429c      	cmp	r4, r3
 80049a0:	da20      	bge.n	80049e4 <__kernel_rem_pio2f+0x474>
 80049a2:	b10e      	cbz	r6, 80049a8 <__kernel_rem_pio2f+0x438>
 80049a4:	eef1 7a67 	vneg.f32	s15, s15
 80049a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80049ac:	e7ba      	b.n	8004924 <__kernel_rem_pio2f+0x3b4>
 80049ae:	ab30      	add	r3, sp, #192	@ 0xc0
 80049b0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8004874 <__kernel_rem_pio2f+0x304>
 80049b4:	440b      	add	r3, r1
 80049b6:	2c00      	cmp	r4, #0
 80049b8:	da05      	bge.n	80049c6 <__kernel_rem_pio2f+0x456>
 80049ba:	b10e      	cbz	r6, 80049c0 <__kernel_rem_pio2f+0x450>
 80049bc:	eef1 7a67 	vneg.f32	s15, s15
 80049c0:	edc7 7a00 	vstr	s15, [r7]
 80049c4:	e7ae      	b.n	8004924 <__kernel_rem_pio2f+0x3b4>
 80049c6:	ed33 7a01 	vldmdb	r3!, {s14}
 80049ca:	3c01      	subs	r4, #1
 80049cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049d0:	e7f1      	b.n	80049b6 <__kernel_rem_pio2f+0x446>
 80049d2:	ed73 7a01 	vldmdb	r3!, {s15}
 80049d6:	3a01      	subs	r2, #1
 80049d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049dc:	e7d2      	b.n	8004984 <__kernel_rem_pio2f+0x414>
 80049de:	eef0 7a47 	vmov.f32	s15, s14
 80049e2:	e7d4      	b.n	800498e <__kernel_rem_pio2f+0x41e>
 80049e4:	ecb2 7a01 	vldmia	r2!, {s14}
 80049e8:	3301      	adds	r3, #1
 80049ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049ee:	e7d6      	b.n	800499e <__kernel_rem_pio2f+0x42e>
 80049f0:	edd2 7a00 	vldr	s15, [r2]
 80049f4:	edd2 6a01 	vldr	s13, [r2, #4]
 80049f8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80049fc:	3801      	subs	r0, #1
 80049fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a02:	ed82 7a00 	vstr	s14, [r2]
 8004a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0a:	edc2 7a01 	vstr	s15, [r2, #4]
 8004a0e:	e798      	b.n	8004942 <__kernel_rem_pio2f+0x3d2>
 8004a10:	edd3 7a00 	vldr	s15, [r3]
 8004a14:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a18:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a22:	ed83 7a00 	vstr	s14, [r3]
 8004a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2a:	edc3 7a01 	vstr	s15, [r3, #4]
 8004a2e:	e78d      	b.n	800494c <__kernel_rem_pio2f+0x3dc>
 8004a30:	ed33 7a01 	vldmdb	r3!, {s14}
 8004a34:	3c01      	subs	r4, #1
 8004a36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a3a:	e78f      	b.n	800495c <__kernel_rem_pio2f+0x3ec>
 8004a3c:	eef1 6a66 	vneg.f32	s13, s13
 8004a40:	eeb1 7a47 	vneg.f32	s14, s14
 8004a44:	edc7 6a00 	vstr	s13, [r7]
 8004a48:	ed87 7a01 	vstr	s14, [r7, #4]
 8004a4c:	eef1 7a67 	vneg.f32	s15, s15
 8004a50:	e790      	b.n	8004974 <__kernel_rem_pio2f+0x404>
 8004a52:	bf00      	nop

08004a54 <scalbnf>:
 8004a54:	ee10 3a10 	vmov	r3, s0
 8004a58:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004a5c:	d02b      	beq.n	8004ab6 <scalbnf+0x62>
 8004a5e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004a62:	d302      	bcc.n	8004a6a <scalbnf+0x16>
 8004a64:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004a68:	4770      	bx	lr
 8004a6a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8004a6e:	d123      	bne.n	8004ab8 <scalbnf+0x64>
 8004a70:	4b24      	ldr	r3, [pc, #144]	@ (8004b04 <scalbnf+0xb0>)
 8004a72:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8004b08 <scalbnf+0xb4>
 8004a76:	4298      	cmp	r0, r3
 8004a78:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004a7c:	db17      	blt.n	8004aae <scalbnf+0x5a>
 8004a7e:	ee10 3a10 	vmov	r3, s0
 8004a82:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004a86:	3a19      	subs	r2, #25
 8004a88:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004a8c:	4288      	cmp	r0, r1
 8004a8e:	dd15      	ble.n	8004abc <scalbnf+0x68>
 8004a90:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8004b0c <scalbnf+0xb8>
 8004a94:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8004b10 <scalbnf+0xbc>
 8004a98:	ee10 3a10 	vmov	r3, s0
 8004a9c:	eeb0 7a67 	vmov.f32	s14, s15
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bfb8      	it	lt
 8004aa4:	eef0 7a66 	vmovlt.f32	s15, s13
 8004aa8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004aac:	4770      	bx	lr
 8004aae:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004b14 <scalbnf+0xc0>
 8004ab2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004ab6:	4770      	bx	lr
 8004ab8:	0dd2      	lsrs	r2, r2, #23
 8004aba:	e7e5      	b.n	8004a88 <scalbnf+0x34>
 8004abc:	4410      	add	r0, r2
 8004abe:	28fe      	cmp	r0, #254	@ 0xfe
 8004ac0:	dce6      	bgt.n	8004a90 <scalbnf+0x3c>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	dd06      	ble.n	8004ad4 <scalbnf+0x80>
 8004ac6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004aca:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004ace:	ee00 3a10 	vmov	s0, r3
 8004ad2:	4770      	bx	lr
 8004ad4:	f110 0f16 	cmn.w	r0, #22
 8004ad8:	da09      	bge.n	8004aee <scalbnf+0x9a>
 8004ada:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004b14 <scalbnf+0xc0>
 8004ade:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8004b18 <scalbnf+0xc4>
 8004ae2:	ee10 3a10 	vmov	r3, s0
 8004ae6:	eeb0 7a67 	vmov.f32	s14, s15
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	e7d9      	b.n	8004aa2 <scalbnf+0x4e>
 8004aee:	3019      	adds	r0, #25
 8004af0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004af4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004af8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8004b1c <scalbnf+0xc8>
 8004afc:	ee07 3a90 	vmov	s15, r3
 8004b00:	e7d7      	b.n	8004ab2 <scalbnf+0x5e>
 8004b02:	bf00      	nop
 8004b04:	ffff3cb0 	.word	0xffff3cb0
 8004b08:	4c000000 	.word	0x4c000000
 8004b0c:	7149f2ca 	.word	0x7149f2ca
 8004b10:	f149f2ca 	.word	0xf149f2ca
 8004b14:	0da24260 	.word	0x0da24260
 8004b18:	8da24260 	.word	0x8da24260
 8004b1c:	33000000 	.word	0x33000000

08004b20 <floorf>:
 8004b20:	ee10 3a10 	vmov	r3, s0
 8004b24:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004b28:	3a7f      	subs	r2, #127	@ 0x7f
 8004b2a:	2a16      	cmp	r2, #22
 8004b2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004b30:	dc2b      	bgt.n	8004b8a <floorf+0x6a>
 8004b32:	2a00      	cmp	r2, #0
 8004b34:	da12      	bge.n	8004b5c <floorf+0x3c>
 8004b36:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004b9c <floorf+0x7c>
 8004b3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004b3e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b46:	dd06      	ble.n	8004b56 <floorf+0x36>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	da24      	bge.n	8004b96 <floorf+0x76>
 8004b4c:	2900      	cmp	r1, #0
 8004b4e:	4b14      	ldr	r3, [pc, #80]	@ (8004ba0 <floorf+0x80>)
 8004b50:	bf08      	it	eq
 8004b52:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8004b56:	ee00 3a10 	vmov	s0, r3
 8004b5a:	4770      	bx	lr
 8004b5c:	4911      	ldr	r1, [pc, #68]	@ (8004ba4 <floorf+0x84>)
 8004b5e:	4111      	asrs	r1, r2
 8004b60:	420b      	tst	r3, r1
 8004b62:	d0fa      	beq.n	8004b5a <floorf+0x3a>
 8004b64:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8004b9c <floorf+0x7c>
 8004b68:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004b6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b74:	ddef      	ble.n	8004b56 <floorf+0x36>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bfbe      	ittt	lt
 8004b7a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8004b7e:	fa40 f202 	asrlt.w	r2, r0, r2
 8004b82:	189b      	addlt	r3, r3, r2
 8004b84:	ea23 0301 	bic.w	r3, r3, r1
 8004b88:	e7e5      	b.n	8004b56 <floorf+0x36>
 8004b8a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8004b8e:	d3e4      	bcc.n	8004b5a <floorf+0x3a>
 8004b90:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004b94:	4770      	bx	lr
 8004b96:	2300      	movs	r3, #0
 8004b98:	e7dd      	b.n	8004b56 <floorf+0x36>
 8004b9a:	bf00      	nop
 8004b9c:	7149f2ca 	.word	0x7149f2ca
 8004ba0:	bf800000 	.word	0xbf800000
 8004ba4:	007fffff 	.word	0x007fffff

08004ba8 <_init>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	bf00      	nop
 8004bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bae:	bc08      	pop	{r3}
 8004bb0:	469e      	mov	lr, r3
 8004bb2:	4770      	bx	lr

08004bb4 <_fini>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr
